{
  "version": 3,
  "sources": ["../src/worker.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["import { connect } from 'cloudflare:sockets';\n\nlet userID = '0afa17f0-b945-43e4-8780-27c1ff364b4d';\nlet landingAddress = '';\nlet socks5Address = ''; // \u683C\u5F0F: user:pass@host:port\u3001:@host:port\nlet dohURL = 'https://dns.google.com/resolve';\n\nconst domainList = [\n\t'https://www.iq.com',\n\t'https://www.dell.com',\n\t'https://www.bilibili.com',\n\t'https://www.wix.com/',\n\t'https://landingsite.ai/',\n\t'https://www.pexels.com/',\n\t'https://www.revid.ai/',\n];\n\nlet parsedSocks5Address = {};\nlet enableSocks = false;\n\nexport default {\n\tasync fetch(request, env, ctx) {\n\t\ttry {\n\t\t\tuserID = env.UUID4 || userID;\n\t\t\tlet landingAddr = env.LANDING_ADDRESS || landingAddress;\n\t\t\tlet doh = env.DOH_URL || dohURL;\n\t\t\tlet socks5Addr = env.SOCKS5 || socks5Address;\n\t\t\t// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\t\t\tif (!doh.startsWith('https://') && !doh.startsWith('http://')) {\n\t\t\t\tdohURL = 'https://' + doh;\n\t\t\t}\n\t\t\tif (landingAddr.includes(',')) {\n\t\t\t\tconst arr = landingAddr.split(',');\n\t\t\t\tconst randomIndex = Math.floor(Math.random() * arr.length);\n\t\t\t\tlandingAddress = arr[randomIndex].trim();\n\t\t\t} else {\n\t\t\t\tlandingAddress = landingAddr.trim();\n\t\t\t}\n\t\t\tif (socks5Addr) {\n\t\t\t\ttry {\n\t\t\t\t\tparsedSocks5Address = socks5AddressParser(socks5Addr);\n\t\t\t\t\tenableSocks = true;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tenableSocks = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\t\t\tconst upgradeHeader = request.headers.get('Upgrade');\n\t\t\tconst url = new URL(request.url);\n\t\t\tif (!upgradeHeader || upgradeHeader !== 'websocket') {\n\t\t\t\tswitch (url.pathname) {\n\t\t\t\t\tcase '/':\n\t\t\t\t\t\tconst randomDomain = domainList[Math.floor(Math.random() * domainList.length)];\n\t\t\t\t\t\tconst redirectResponse = new Response('', {\n\t\t\t\t\t\t\tstatus: 301,\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\tLocation: randomDomain,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn redirectResponse;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn new Response('This site can\u2019t provide a secure connection', { status: 404 });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst pathString = url.pathname;\n\t\t\t\tif (pathString.includes('/pyip=')) {\n\t\t\t\t\tconst pathToLandingAddress = pathString.split('=')[1];\n\t\t\t\t\tif (isValidLandingAddress(pathToLandingAddress)) {\n\t\t\t\t\t\tlandingAddress = pathToLandingAddress;\n\t\t\t\t\t}\n\t\t\t\t} else if (pathString.includes('/socks=')) {\n\t\t\t\t\tconst pathToSocks = pathString.split('=')[1];\n\t\t\t\t\tconst matchSocks = (socksAddress) => {\n\t\t\t\t\t\tconst regex =\n\t\t\t\t\t\t\t/^(?:socks:\\/\\/)?(?:([a-zA-Z0-9._%+-]+):([a-zA-Z0-9._%+-]+)@)?([0-9]{1,3}(?:\\.[0-9]{1,3}){3}:\\d+|[a-zA-Z0-9.-]+:\\d+)$/;\n\t\t\t\t\t\tconst match = socksAddress.match(regex);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst [_, username, password, address] = match;\n\t\t\t\t\t\t\treturn username && password ? `${username}:${password}@${address}` : `:@${address}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t};\n\t\t\t\t\tlet socksAddress = matchSocks(pathToSocks);\n\t\t\t\t\tif (socksAddress.length !== 0) {\n\t\t\t\t\t\tparsedSocks5Address = socks5AddressParser(socksAddress);\n\t\t\t\t\t\tenableSocks = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn await vlessOverWSHandler(request);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn new Response(err.toString());\n\t\t}\n\t},\n};\n\nasync function vlessOverWSHandler(request) {\n\tconst [client, webSocket] = Object.values(new WebSocketPair());\n\twebSocket.accept();\n\tlet address = '';\n\tlet portWithRandomLog = '';\n\tconst log = (info, event) => {\n\t\tconsole.log(`[${address}:${portWithRandomLog}] ${info}`, event || '');\n\t};\n\tconst earlyDataHeader = request.headers.get('sec-websocket-protocol') || '';\n\tconst readableWebSocketStream = makeReadableWebSocketStream(webSocket, earlyDataHeader, log);\n\tlet remoteSocketWapper = {\n\t\tvalue: null,\n\t};\n\tlet isDns = false;\n\tlet udpStreamWrite = null;\n\treadableWebSocketStream\n\t\t.pipeTo(\n\t\t\tnew WritableStream({\n\t\t\t\tasync write(chunk, controller) {\n\t\t\t\t\tif (isDns && udpStreamWrite) {\n\t\t\t\t\t\treturn udpStreamWrite(chunk);\n\t\t\t\t\t}\n\t\t\t\t\tif (remoteSocketWapper.value) {\n\t\t\t\t\t\tconst writer = remoteSocketWapper.value.writable.getWriter();\n\t\t\t\t\t\tawait writer.write(chunk);\n\t\t\t\t\t\twriter.releaseLock();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst {\n\t\t\t\t\t\thasError,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\taddressType,\n\t\t\t\t\t\tportRemote = 443,\n\t\t\t\t\t\taddressRemote = '',\n\t\t\t\t\t\trawDataIndex,\n\t\t\t\t\t\tvlessVersion = new Uint8Array([0, 0]),\n\t\t\t\t\t\tisUDP,\n\t\t\t\t\t} = processVlessHeader(chunk, userID);\n\t\t\t\t\taddress = addressRemote;\n\t\t\t\t\tportWithRandomLog = `${portRemote}--${Math.random()} ${isUDP ? 'udp ' : 'tcp '}`;\n\t\t\t\t\tif (hasError) {\n\t\t\t\t\t\tthrow new Error(message);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (isUDP) {\n\t\t\t\t\t\tif (portRemote === 53) {\n\t\t\t\t\t\t\tisDns = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// throw new Error('UDP proxy only enable for DNS which is port 53');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst vlessResponseHeader = new Uint8Array([vlessVersion[0], 0]);\n\t\t\t\t\tconst rawClientData = chunk.slice(rawDataIndex);\n\t\t\t\t\tif (isDns) {\n\t\t\t\t\t\tconst { write } = await handleUDPOutBound(webSocket, vlessResponseHeader, log);\n\t\t\t\t\t\tudpStreamWrite = write;\n\t\t\t\t\t\tudpStreamWrite(rawClientData);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\thandleTCPOutBound(remoteSocketWapper, addressType, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log);\n\t\t\t\t},\n\t\t\t\tclose() {\n\t\t\t\t\tlog(`readableWebSocketStream is close`);\n\t\t\t\t},\n\t\t\t\tabort(reason) {\n\t\t\t\t\tlog(`readableWebSocketStream is abort`, JSON.stringify(reason));\n\t\t\t\t},\n\t\t\t})\n\t\t)\n\t\t.catch((err) => {\n\t\t\tlog('readableWebSocketStream pipeTo error', err);\n\t\t});\n\treturn new Response(null, { status: 101, webSocket: client });\n}\n\nasync function handleTCPOutBound(remoteSocket, addressType, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log) {\n\tasync function connectAndWrite(address, port, socks = false) {\n\t\tconst connectAddr = {\n\t\t\thostname: address,\n\t\t\tport: port,\n\t\t};\n\t\tconst tcpSocket = socks ? await socks5Connect(addressType, address, port, log) : connect(connectAddr);\n\t\tremoteSocket.value = tcpSocket;\n\t\tlog(`connected to ${address}:${port}`);\n\t\tconst writer = tcpSocket.writable.getWriter();\n\t\tawait writer.write(rawClientData);\n\t\twriter.releaseLock();\n\t\treturn tcpSocket;\n\t}\n\tasync function retry() {\n\t\tif (enableSocks) {\n\t\t\ttcpSocket = await connectAndWrite(addressRemote, portRemote, true);\n\t\t} else {\n\t\t\tlet jsonAddr = landingAddressParse(landingAddress);\n\t\t\ttcpSocket = await connectAndWrite(jsonAddr.host || addressRemote, jsonAddr.port || portRemote);\n\t\t}\n\t\ttcpSocket.closed\n\t\t\t.catch((error) => {\n\t\t\t\tlog('retry tcpSocket closed error', error);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsafeCloseWebSocket(webSocket);\n\t\t\t});\n\t\tremoteSocketToWS(tcpSocket, webSocket, vlessResponseHeader, null, log);\n\t}\n\n\tlet tcpSocket = await connectAndWrite(addressRemote, portRemote);\n\tremoteSocketToWS(tcpSocket, webSocket, vlessResponseHeader, retry, log);\n}\n\nfunction makeReadableWebSocketStream(webSocketServer, earlyDataHeader, log) {\n\tlet readableStreamCancel = false;\n\tconst stream = new ReadableStream({\n\t\tstart(controller) {\n\t\t\twebSocketServer.addEventListener('message', (event) => {\n\t\t\t\tif (readableStreamCancel) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst message = event.data;\n\t\t\t\tcontroller.enqueue(message);\n\t\t\t});\n\t\t\twebSocketServer.addEventListener('close', () => {\n\t\t\t\tsafeCloseWebSocket(webSocketServer);\n\t\t\t\tif (readableStreamCancel) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcontroller.close();\n\t\t\t});\n\t\t\twebSocketServer.addEventListener('error', (err) => {\n\t\t\t\tcontroller.error('webSocketServer has error', err);\n\t\t\t});\n\t\t\tconst { earlyData, error } = base64ToArrayBuffer(earlyDataHeader);\n\t\t\tif (error) {\n\t\t\t\tcontroller.error(error);\n\t\t\t} else if (earlyData) {\n\t\t\t\tcontroller.enqueue(earlyData);\n\t\t\t}\n\t\t},\n\n\t\tpull(controller) {\n\t\t\t// if ws can stop read if stream is full, we can implement backpressure\n\t\t\t// https://streams.spec.whatwg.org/#example-rs-push-backpressure\n\t\t},\n\t\tcancel(reason) {\n\t\t\tif (readableStreamCancel) return;\n\t\t\tlog(`ReadableStream was canceled, due to ${reason}`);\n\t\t\treadableStreamCancel = true;\n\t\t\tsafeCloseWebSocket(webSocketServer);\n\t\t},\n\t});\n\n\treturn stream;\n}\n\nfunction processVlessHeader(vlessBuffer, userID) {\n\tif (vlessBuffer.byteLength < 24) {\n\t\treturn { hasError: true, message: 'invalid data' };\n\t}\n\tconst version = new Uint8Array(vlessBuffer.slice(0, 1));\n\tlet isValidUser = false;\n\tlet isUDP = false;\n\tif (stringify(new Uint8Array(vlessBuffer.slice(1, 17))) === userID) {\n\t\tisValidUser = true;\n\t}\n\tif (!isValidUser) {\n\t\treturn { hasError: true, message: 'invalid user' };\n\t}\n\n\tconst optLength = new Uint8Array(vlessBuffer.slice(17, 18))[0];\n\tconst command = new Uint8Array(vlessBuffer.slice(18 + optLength, 18 + optLength + 1))[0];\n\tif (command === 1) {\n\t\t// ignore\n\t} else if (command === 2) {\n\t\tisUDP = true;\n\t} else {\n\t\treturn {\n\t\t\thasError: true,\n\t\t\tmessage: `command ${command} is not support, command 01-tcp,02-udp,03-mux`,\n\t\t};\n\t}\n\tconst portIndex = 18 + optLength + 1;\n\tconst portBuffer = vlessBuffer.slice(portIndex, portIndex + 2);\n\tconst portRemote = new DataView(portBuffer).getUint16(0);\n\tlet addressIndex = portIndex + 2;\n\tconst addressBuffer = new Uint8Array(vlessBuffer.slice(addressIndex, addressIndex + 1));\n\n\tconst addressType = addressBuffer[0];\n\tlet addressLength = 0;\n\tlet addressValueIndex = addressIndex + 1;\n\tlet addressValue = '';\n\tswitch (addressType) {\n\t\tcase 1:\n\t\t\taddressLength = 4;\n\t\t\taddressValue = new Uint8Array(vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)).join('.');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\taddressLength = new Uint8Array(vlessBuffer.slice(addressValueIndex, addressValueIndex + 1))[0];\n\t\t\taddressValueIndex += 1;\n\t\t\taddressValue = new TextDecoder().decode(vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength));\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\taddressLength = 16;\n\t\t\tconst dataView = new DataView(vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength));\n\t\t\tconst ipv6 = [];\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tipv6.push(dataView.getUint16(i * 2).toString(16));\n\t\t\t}\n\t\t\taddressValue = ipv6.join(':');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn { hasError: true, message: `invild  addressType is ${addressType}` };\n\t}\n\tif (!addressValue) {\n\t\treturn { hasError: true, message: `addressValue is empty, addressType is ${addressType}` };\n\t}\n\n\treturn {\n\t\thasError: false,\n\t\taddressRemote: addressValue,\n\t\taddressType,\n\t\tportRemote,\n\t\trawDataIndex: addressValueIndex + addressLength,\n\t\tvlessVersion: version,\n\t\tisUDP,\n\t};\n}\n\nasync function remoteSocketToWS(remoteSocket, webSocket, vlessResponseHeader, retry, log) {\n\tlet vlessHeader = vlessResponseHeader;\n\tlet hasIncomingData = false;\n\tawait remoteSocket.readable\n\t\t.pipeTo(\n\t\t\tnew WritableStream({\n\t\t\t\tstart() {},\n\t\t\t\tasync write(chunk, controller) {\n\t\t\t\t\thasIncomingData = true;\n\t\t\t\t\tif (webSocket.readyState !== WS_READY_STATE_OPEN) {\n\t\t\t\t\t\tcontroller.error('webSocket.readyState is not open, maybe close');\n\t\t\t\t\t}\n\t\t\t\t\tif (vlessHeader) {\n\t\t\t\t\t\twebSocket.send(await new Blob([vlessHeader, chunk]).arrayBuffer());\n\t\t\t\t\t\tvlessHeader = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twebSocket.send(chunk);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclose() {\n\t\t\t\t\tlog(`remoteConnection!.readable is close with hasIncomingData is ${hasIncomingData}`);\n\t\t\t\t},\n\t\t\t\tabort(reason) {\n\t\t\t\t\tconsole.error(`remoteConnection!.readable abort`, reason);\n\t\t\t\t},\n\t\t\t})\n\t\t)\n\t\t.catch((error) => {\n\t\t\tconsole.error(`remoteSocketToWS has exception `, error.stack || error);\n\t\t\tsafeCloseWebSocket(webSocket);\n\t\t});\n\n\tif (hasIncomingData === false && retry) {\n\t\tlog(`retry`);\n\t\tretry();\n\t}\n}\n\nfunction base64ToArrayBuffer(base64Str) {\n\tif (!base64Str) {\n\t\treturn { error: null };\n\t}\n\ttry {\n\t\tbase64Str = base64Str.replace(/-/g, '+').replace(/_/g, '/');\n\t\tconst decode = atob(base64Str);\n\t\tconst arryBuffer = Uint8Array.from(decode, (c) => c.charCodeAt(0));\n\t\treturn { earlyData: arryBuffer.buffer, error: null };\n\t} catch (error) {\n\t\treturn { error };\n\t}\n}\n\nconst WS_READY_STATE_OPEN = 1;\nconst WS_READY_STATE_CLOSING = 2;\n\nfunction safeCloseWebSocket(socket) {\n\ttry {\n\t\tif (socket.readyState === WS_READY_STATE_OPEN || socket.readyState === WS_READY_STATE_CLOSING) {\n\t\t\tsocket.close();\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('safeCloseWebSocket error', error);\n\t}\n}\n\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n\tbyteToHex.push((i + 256).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n\treturn (\n\t\tbyteToHex[arr[offset + 0]] +\n\t\tbyteToHex[arr[offset + 1]] +\n\t\tbyteToHex[arr[offset + 2]] +\n\t\tbyteToHex[arr[offset + 3]] +\n\t\t'-' +\n\t\tbyteToHex[arr[offset + 4]] +\n\t\tbyteToHex[arr[offset + 5]] +\n\t\t'-' +\n\t\tbyteToHex[arr[offset + 6]] +\n\t\tbyteToHex[arr[offset + 7]] +\n\t\t'-' +\n\t\tbyteToHex[arr[offset + 8]] +\n\t\tbyteToHex[arr[offset + 9]] +\n\t\t'-' +\n\t\tbyteToHex[arr[offset + 10]] +\n\t\tbyteToHex[arr[offset + 11]] +\n\t\tbyteToHex[arr[offset + 12]] +\n\t\tbyteToHex[arr[offset + 13]] +\n\t\tbyteToHex[arr[offset + 14]] +\n\t\tbyteToHex[arr[offset + 15]]\n\t).toLowerCase();\n}\n\nfunction isValidUUID(uuid) {\n\tconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\treturn uuidRegex.test(uuid);\n}\n\nfunction stringify(arr, offset = 0) {\n\tconst uuid = unsafeStringify(arr, offset);\n\tif (!isValidUUID(uuid)) {\n\t\tthrow TypeError('Stringified UUID is invalid');\n\t}\n\treturn uuid;\n}\n\nasync function handleUDPOutBound(webSocket, vlessResponseHeader, log) {\n\tlet isVlessHeaderSent = false;\n\tconst transformStream = new TransformStream({\n\t\tstart(controller) {},\n\t\ttransform(chunk, controller) {\n\t\t\tfor (let index = 0; index < chunk.byteLength; ) {\n\t\t\t\tconst lengthBuffer = chunk.slice(index, index + 2);\n\t\t\t\tconst udpPakcetLength = new DataView(lengthBuffer).getUint16(0);\n\t\t\t\tconst udpData = new Uint8Array(chunk.slice(index + 2, index + 2 + udpPakcetLength));\n\t\t\t\tindex = index + 2 + udpPakcetLength;\n\t\t\t\tcontroller.enqueue(udpData);\n\t\t\t}\n\t\t},\n\t\tflush(controller) {},\n\t});\n\n\ttransformStream.readable\n\t\t.pipeTo(\n\t\t\tnew WritableStream({\n\t\t\t\tasync write(chunk) {\n\t\t\t\t\t// e.g: dohURL = 'https://1.1.1.1/dns-query';\n\t\t\t\t\tconst resp = await fetch(dohURL, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'content-type': 'application/dns-message',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: chunk,\n\t\t\t\t\t});\n\t\t\t\t\tconst dnsQueryResult = await resp.arrayBuffer();\n\t\t\t\t\tconst udpSize = dnsQueryResult.byteLength;\n\t\t\t\t\tconst udpSizeBuffer = new Uint8Array([(udpSize >> 8) & 0xff, udpSize & 0xff]);\n\t\t\t\t\tif (webSocket.readyState === WS_READY_STATE_OPEN) {\n\t\t\t\t\t\tlog(`doh success and dns message length is ${udpSize}`);\n\t\t\t\t\t\tif (isVlessHeaderSent) {\n\t\t\t\t\t\t\twebSocket.send(await new Blob([udpSizeBuffer, dnsQueryResult]).arrayBuffer());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twebSocket.send(await new Blob([vlessResponseHeader, udpSizeBuffer, dnsQueryResult]).arrayBuffer());\n\t\t\t\t\t\t\tisVlessHeaderSent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t)\n\t\t.catch((error) => {\n\t\t\tlog('dns udp has error' + error);\n\t\t});\n\n\tconst writer = transformStream.writable.getWriter();\n\n\treturn {\n\t\twrite(chunk) {\n\t\t\twriter.write(chunk);\n\t\t},\n\t};\n}\n\nasync function socks5Connect(addressType, addressRemote, portRemote, log) {\n\tconst { username, password, hostname, port } = parsedSocks5Address;\n\tconst socket = connect({ hostname, port });\n\tconst socksGreeting = new Uint8Array([5, 2, 0, 2]);\n\tconst writer = socket.writable.getWriter();\n\tawait writer.write(socksGreeting);\n\n\tlog('sent socks greeting');\n\n\tconst reader = socket.readable.getReader();\n\tconst encoder = new TextEncoder();\n\tlet res = (await reader.read()).value;\n\tif (res[0] !== 0x05) {\n\t\tlog(`socks server version error: ${res[0]} expected: 5`);\n\t\treturn;\n\t}\n\tif (res[1] === 0xff) {\n\t\tlog('no acceptable methods');\n\t\treturn;\n\t}\n\tif (res[1] === 0x02) {\n\t\tlog('socks server needs auth');\n\t\tif (!username || !password) {\n\t\t\tlog('please provide username/password');\n\t\t\treturn;\n\t\t}\n\t\tconst authRequest = new Uint8Array([1, username.length, ...encoder.encode(username), password.length, ...encoder.encode(password)]);\n\t\tawait writer.write(authRequest);\n\t\tres = (await reader.read()).value;\n\t\tif (res[0] !== 0x01 || res[1] !== 0x00) {\n\t\t\tlog('fail to auth socks server');\n\t\t\treturn;\n\t\t}\n\t}\n\tlet DSTADDR;\n\tswitch (addressType) {\n\t\tcase 1:\n\t\t\tDSTADDR = new Uint8Array([1, ...addressRemote.split('.').map(Number)]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tDSTADDR = new Uint8Array([3, addressRemote.length, ...encoder.encode(addressRemote)]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tDSTADDR = new Uint8Array([4, ...addressRemote.split(':').flatMap((x) => [parseInt(x.slice(0, 2), 16), parseInt(x.slice(2), 16)])]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tlog(`invild  addressType is ${addressType}`);\n\t\t\treturn;\n\t}\n\tconst socksRequest = new Uint8Array([5, 1, 0, ...DSTADDR, portRemote >> 8, portRemote & 0xff]);\n\tawait writer.write(socksRequest);\n\tlog('sent socks request');\n\tres = (await reader.read()).value;\n\tif (res[1] === 0x00) {\n\t\tlog('socks connection opened');\n\t} else {\n\t\tlog('fail to open socks connection');\n\t\treturn;\n\t}\n\twriter.releaseLock();\n\treader.releaseLock();\n\treturn socket;\n}\n\nfunction socks5AddressParser(address) {\n\tlet [latter, former] = address.split('@').reverse();\n\tlet username, password, hostname, port;\n\tif (former) {\n\t\tconst formers = former.split(':');\n\t\tif (formers.length !== 2) {\n\t\t\tthrow new Error('Invalid SOCKS address format');\n\t\t}\n\t\t[username, password] = formers;\n\t}\n\tconst latters = latter.split(':');\n\tport = Number(latters.pop());\n\tif (isNaN(port)) {\n\t\tthrow new Error('Invalid SOCKS address format');\n\t}\n\thostname = latters.join(':');\n\tconst regex = /^\\[.*\\]$/;\n\tif (hostname.includes(':') && !regex.test(hostname)) {\n\t\tthrow new Error('Invalid SOCKS address format');\n\t}\n\treturn { username, password, hostname, port };\n}\n\n// \u68C0\u67E5\u662F\u5426\u4E3A\uFF1A(\u5B50)\u57DF\u540D\u3001IPv4\u3001[IPv6]\u3001(\u5B50)\u57DF\u540D:\u7AEF\u53E3\u3001IPv4:\u7AEF\u53E3\u3001[IPv6]:\u7AEF\u53E3\nfunction isValidLandingAddress(ip) {\n\tvar reg =\n\t\t/^(?:(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}(?::\\d{1,5})?|(?:(?:\\d{1,3}\\.){3}\\d{1,3})(?::\\d{1,5})?|(?:\\[[0-9a-fA-F:]+\\])(?::\\d{1,5})?)$/;\n\treturn reg.test(ip);\n}\n\n// \u89E3\u6790HOST\u548CPORT\uFF0C\u5B57\u7B26\u4E32\u683C\u5F0F\u662F\u5426\u4E3A\uFF1A(\u5B50)\u57DF\u540D\u3001IPv4\u3001[IPv6]\u3001(\u5B50)\u57DF\u540D:\u7AEF\u53E3\u3001IPv4:\u7AEF\u53E3\u3001[IPv6]:\u7AEF\u53E3\nfunction landingAddressParse(address) {\n\tconst regex =\n\t\t/^(?:(?<domain>(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::(?<port>\\d{1,5}))?|(?<ipv4>(?:\\d{1,3}\\.){3}\\d{1,3})(?::(?<port_ipv4>\\d{1,5}))?|(?<ipv6>\\[[0-9a-fA-F:]+\\])(?::(?<port_ipv6>\\d{1,5}))?)$/;\n\tconst match = address.match(regex);\n\tif (match) {\n\t\tlet host = match.groups.domain || match.groups.ipv4 || match.groups.ipv6;\n\t\tlet port = match.groups.port || match.groups.port_ipv4 || match.groups.port_ipv6 || undefined;\n\t\treturn { host, port };\n\t} else {\n\t\treturn { host: '', undefined };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["socksAddress", "tcpSocket", "userID"]
}
