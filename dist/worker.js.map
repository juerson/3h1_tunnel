{
  "version": 3,
  "sources": ["../src/worker.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["import { connect } from 'cloudflare:sockets';\r\n\r\nlet userID = '0648919d-8bf1-4d4c-8525-36cf487506ec'; // \u5907\u7528UUID\r\nlet landingAddress = ''; // \u5907\u7528\u4EE3\u7406IP\u5730\u5740\r\n\r\n// \u5907\u7528socks5\u4EE3\u7406\u5730\u5740\uFF0Csocks5Address\u4F18\u5148\u4E8ElandingAddress\uFF08\u683C\u5F0F:  user:pass@host:port\u3001:@host:port\uFF09\r\nlet socks5Address = '';\r\n\r\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \u8BE5\u53C2\u6570\u7528\u4E8E\u8BBF\u95EEGitHub\u7684\u79C1\u6709\u4ED3\u5E93\u6587\u4EF6 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nconst DEFAULT_GITHUB_TOKEN = ''; // GitHub\u7684\u4EE4\u724C\r\nconst DEFAULT_OWNER = ''; // GitHub\u7684\u7528\u6237\u540D\r\nconst DEFAULT_REPO = ''; // GitHub\u7684\u4ED3\u5E93\u540D\r\nconst DEFAULT_BRANCH = 'main'; // GitHub\u7684\u5206\u652F\u540D\r\nconst DEFAULT_FILE_PATH = 'README.md'; // GitHub\u7684\u6587\u4EF6\u8DEF\u5F84\r\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\r\nlet clashTemplateUrl = 'https://raw.githubusercontent.com/juerson/cfvless_tunnel/refs/heads/master/clash_template.yaml'; // clash\u6A21\u677F\r\nlet ipaddrURL = 'https://raw.githubusercontent.com/juerson/cfvless_tunnel/refs/heads/master/ipaddr.txt';\r\nlet dohURL = 'https://dns.google.com/resolve';\r\n\r\n/**\r\n * 1\u3001\u67E5\u770B\u8282\u70B9\u914D\u7F6E\u4FE1\u606F\u7684\u5BC6\u7801\uFF1Ahttp://your_worker_domain/config?pwd={CONFIG_PASSWORD}\r\n *\r\n * 2\u3001\u67E5\u770B\u8BA2\u9605\u7684\u5BC6\u7801\uFF1A\r\n *        https://your_worker_domain/sub?pwd={SUB_PASSWORD}&target={v2 or clash}\r\n *    \u53EF\u9009\u53C2\u6570\uFF08\u4E00\u4E2A\u6216\u591A\u4E2A\uFF09\uFF0C\u987A\u5E8F\u4E0D\u56FA\u5B9A\uFF1A\r\n *        &page=1&id={your_vless_uuid}&port={port}&cidr={cidr}&path={your_vess_path}&hostName={your_worker_domain}\r\n */\r\nlet configPassword = ''; // \u5907\u7528\r\nlet subPassword = ''; // \u5907\u7528\r\n\r\nconst HTTP_WITH_PORTS = [80, 8080, 8880, 2052, 2082, 2086, 2095];\r\nconst HTTPS_WITH_PORTS = [443, 2053, 2083, 2087, 2096, 8443];\r\n\r\nconst domainList = [\r\n\t'https://www.iq.com',\r\n\t'https://www.dell.com',\r\n\t'https://www.bilibili.com',\r\n\t'https://www.wix.com/',\r\n\t'https://landingsite.ai/',\r\n\t'https://vimeo.com/',\r\n\t'https://www.pexels.com/',\r\n\t'https://www.revid.ai/',\r\n];\r\n\r\nlet parsedSocks5Address = {};\r\nlet enableSocks = false;\r\n\r\nexport default {\r\n\tasync fetch(request, env, ctx) {\r\n\t\ttry {\r\n\t\t\tuserID = env.UUID4 || userID;\r\n\t\t\tlandingAddress = env.LANDING_ADDRESS || landingAddress;\r\n\t\t\tsocks5Address = env.SOCKS5 || socks5Address;\r\n\t\t\tconfigPassword = env.CONFIG_PASSWORD || configPassword;\r\n\t\t\tsubPassword = env.SUB_PASSWORD || subPassword;\r\n\t\t\tdohURL = env.DOH_URL || dohURL;\r\n\r\n\t\t\t// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \u8BBF\u95EEGitHub\u7684\u79C1\u6709\u4ED3\u5E93\u6587\u4EF6 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\t\t\tconst GITHUB_TOKEN = env.GITHUB_TOKEN || DEFAULT_GITHUB_TOKEN;\r\n\t\t\tconst OWNER = env.GITHUB_OWNER || DEFAULT_OWNER;\r\n\t\t\tconst REPO = env.GITHUB_REPO || DEFAULT_REPO;\r\n\t\t\tconst BRANCH = env.GITHUB_BRANCH || DEFAULT_BRANCH;\r\n\t\t\tconst FILE_PATH = env.GITHUB_FILE_PATH || DEFAULT_FILE_PATH;\r\n\t\t\t// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\r\n\t\t\t// \u68C0\u67E5\u5B57\u7B26\u4E32\u4E2D\u662F\u5426\u542B\u9017\u53F7\uFF0C\u6709\u7684\u5C31\u968F\u673A\u4ECE\u4E2D\u9009\u62E9\u4E00\u4E2A\u5143\u7D20\r\n\t\t\tif (landingAddress.includes(',')) {\r\n\t\t\t\tconst arr = landingAddress.split(',');\r\n\t\t\t\tconst randomIndex = Math.floor(Math.random() * arr.length);\r\n\t\t\t\tlandingAddress = arr[randomIndex].trim();\r\n\t\t\t} else {\r\n\t\t\t\tlandingAddress = landingAddress.trim();\r\n\t\t\t}\r\n\t\t\tif (socks5Address) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tparsedSocks5Address = socks5AddressParser(socks5Address);\r\n\t\t\t\t\tenableSocks = true;\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// console.log(err.toString());\r\n\t\t\t\t\tenableSocks = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst upgradeHeader = request.headers.get('Upgrade');\r\n\t\t\tconst url = new URL(request.url);\r\n\t\t\tif (!upgradeHeader || upgradeHeader !== 'websocket') {\r\n\t\t\t\tswitch (url.pathname) {\r\n\t\t\t\t\tcase '/':\r\n\t\t\t\t\t\tconst randomDomain = domainList[Math.floor(Math.random() * domainList.length)];\r\n\t\t\t\t\t\tconst redirectResponse = new Response('', {\r\n\t\t\t\t\t\t\tstatus: 301,\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\tLocation: randomDomain,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn redirectResponse;\r\n\t\t\t\t\tcase `/config`: {\r\n\t\t\t\t\t\t// \u63A5\u6536\u5730\u5740\u4E2D\u4F20\u5165\u7684pwd\u53C2\u6570\u503C\r\n\t\t\t\t\t\tlet password = url.searchParams.get('pwd') || '';\r\n\t\t\t\t\t\tif (password) {\r\n\t\t\t\t\t\t\tpassword = encodeURIComponent(password);\r\n\t\t\t\t\t\t\tconfigPassword = encodeURIComponent(configPassword);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// \u68C0\u67E5\u5730\u5740\u680F\u4E2D\u4F20\u5165\u7684pwd\u5BC6\u7801\u8DDF\u73AF\u5883\u53D8\u91CF\u7684CONFIG_PASSWORD\u5BC6\u7801\u662F\u5426\u4E00\u81F4\uFF0C\u4E00\u81F4\u624D\u80FD\u67E5\u770B\u8282\u70B9\u7684\u914D\u7F6E\u4FE1\u606F\r\n\t\t\t\t\t\tif (configPassword === password) {\r\n\t\t\t\t\t\t\tconst baseConfig = getBaseConfig(userID, request.headers.get('Host'));\r\n\t\t\t\t\t\t\treturn new Response(`${baseConfig}`, {\r\n\t\t\t\t\t\t\t\tstatus: 200,\r\n\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t'Content-Type': 'text/plain;charset=utf-8',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn new Response('Not found', { status: 404 });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase `/sub`:\r\n\t\t\t\t\t\tlet password = url.searchParams.get('pwd') || ''; // (\u5FC5\u987B\u7684)\u63A5\u6536pwd\u53C2\u6570(password\u5BC6\u7801\u7684\u7B80\u5199)\uFF0C\u4E0D\u4F20\u5165pwd\u53C2\u6570\u5219\u4E0D\u80FD\u67E5\u770B\u5BF9\u5E94\u7684\u914D\u7F6E\u4FE1\u606F\r\n\t\t\t\t\t\tlet target = url.searchParams.get('target'); // (\u5FC5\u987B\u7684)\u63A5\u6536target\u53C2\u6570\uFF0C\u6307\u5411\u4EC0\u4E48\u8BA2\u9605\uFF1Fv2ray or clash?\r\n\t\t\t\t\t\tlet hostName = url.searchParams.get('hostName') || url.hostname; // \u63A5\u6536hostName\u53C2\u6570\uFF0C\u6CA1\u6709\u5219\u4F7F\u7528\u5F53\u524D\u7F51\u9875\u7684\u57DF\u540D\uFF0C\u53EF\u9009\u7684\uFF08\u586B\u5145\u5230vless\u4E2D\u7684sni\u548Chost\uFF09\r\n\t\t\t\t\t\tuserID = url.searchParams.get('id') || userID; // \u63A5\u6536id\u53C2\u6570\uFF0C\u6CA1\u6709\u5219\u4F7F\u7528\u9ED8\u8BA4\u503C\uFF0C\u53EF\u9009\u7684\r\n\t\t\t\t\t\tlet portParam = url.searchParams.get('port') || 0; // \u63A5\u6536port\u53C2\u6570\uFF0C\u53EF\u9009\u7684\r\n\t\t\t\t\t\tlet pathParam = url.searchParams.get('path'); // \u63A5\u6536path\u53C2\u6570\uFF0C\u53EF\u9009\u7684\r\n\t\t\t\t\t\tlet cidrParam = url.searchParams.get('cidr'); // \u5C31\u6536cidr\u53C2\u6570\uFF0C\u53EF\u9009\u7684\uFF0C\u5982\uFF1Acidr=104.21.192.0/19,104.21.64.0/19\r\n\r\n\t\t\t\t\t\t// \u68C0\u67E5\u5730\u5740\u680F\u4E2D\u4F20\u5165\u7684pwd\u5BC6\u7801\uFF0C\u8DDF\u73AF\u5883\u53D8\u91CF\u7684SUB_PASSWORD\u5BC6\u7801\u662F\u5426\u4E00\u81F4\uFF0C\u4E00\u624D\u80FD\u80FD\u67E5\u770B/\u6267\u884C\u8BA2\u9605\u7684\u4EE3\u7801\r\n\t\t\t\t\t\tif (password) {\r\n\t\t\t\t\t\t\tpassword = encodeURIComponent(password);\r\n\t\t\t\t\t\t\tsubPassword = encodeURIComponent(subPassword);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!isValidUUID(userID)) {\r\n\t\t\t\t\t\t\tthrow new Error('uuid4 is not valid');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// \u5BF9path\u8FDB\u884Curl\u7F16\u7801\uFF0C\u6CA1\u6709path\u53C2\u6570\u5219\u4F7F\u7528\u9ED8\u8BA4\u503C\r\n\t\t\t\t\t\tlet path = pathParam ? encodeURIComponent(pathParam) : '%2F%3Fed%3D2048';\r\n\t\t\t\t\t\tlet ipsArray = []; // \u540E\u9762vless\u3001clash\u4E2D\u8981\u4F7F\u7528\u5230\r\n\r\n\t\t\t\t\t\t// \u83B7\u53D6\u8BA2\u9605\u9700\u8981\u7684\u4F18\u9009CDN IP\uFF0C\u540E\u9762\u9700\u8981\u5B83\u6784\u5EFA\u8282\u70B9\u4FE1\u606F\r\n\t\t\t\t\t\tif (!cidrParam && password === subPassword) {\r\n\t\t\t\t\t\t\tlet ips_string = '';\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t// \u8BFB\u53D6 GitHub \u79C1\u6709\u4ED3\u5E93\u7684\u4F18\u9009IP\u6216\u57DF\u540D\uFF0C\u8BFB\u53D6\u4E0D\u5230\u5C31\u9ED8\u8BA4\u4E3A\u7A7A\u5B57\u7B26\u4E32\r\n\t\t\t\t\t\t\t\tconst fileContent = await fetchGitHubFile(GITHUB_TOKEN, OWNER, REPO, FILE_PATH, BRANCH);\r\n\t\t\t\t\t\t\t\tconst decoder = new TextDecoder('utf-8');\r\n\t\t\t\t\t\t\t\tips_string = decoder.decode(fileContent.body);\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\t// console.log(`Error: ${error.message}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// \u5982\u679C\u8BFB\u53D6\u5230GitHub\u79C1\u6709\u6587\u4EF6\u7684\u5185\u5BB9\u7A7A\u65F6\uFF0C\u5C31\u4F7F\u7528ipaddrURL\u7684IP\u5730\u5740\r\n\t\t\t\t\t\t\tips_string = ips_string !== '' ? ips_string : await fetchWebPageContent(ipaddrURL);\r\n\t\t\t\t\t\t\tlet ips_Array = ips_string\r\n\t\t\t\t\t\t\t\t.trim()\r\n\t\t\t\t\t\t\t\t.split(/\\r\\n|\\n|\\r/)\r\n\t\t\t\t\t\t\t\t.map((ip) => ip.trim());\r\n\t\t\t\t\t\t\tipsArray = sortIpAddresses(ips_Array); // \u6309\u7167IP\u6392\u5E8F\uFF0C\u4FBF\u4E8E\u540E\u9762\u5206\u9875\u663E\u793A\r\n\t\t\t\t\t\t} else if (cidrParam && password === subPassword) {\r\n\t\t\t\t\t\t\tipsArray = getCidrParamAndGenerateIps(cidrParam); // \u4F7F\u7528get\u8BF7\u6C42\u4E2D\u7684cidr\u53C2\u6570\u503C\u751F\u6210ip\u5730\u5740(\u6700\u591A1000\u4E2A\uFF0C\u987A\u5E8F\u968F\u673A)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn new Response('Not found', { status: 404 }); // \u5BC6\u7801\u9519\u8BEF\uFF0C\u663E\u793ANot found\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet page = url.searchParams.get('page') || 1; // \u4ECE1\u5F00\u59CB\u7684\u9875\u7801\r\n\t\t\t\t\t\tif (target === 'v2' || target === base64ToUtf8('djJyYXk')) {\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * \u5206\u9875\u521B\u5EFAvless\u8282\u70B9\uFF1A\u9632\u6B62\u592A\u591A\u8282\u70B9\uFF0C\u5168\u90E8\u751F\u6210\u5230\u4E00\u4E2Avless\u914D\u7F6E\u6587\u4EF6\uFF0C\u5BFC\u81F4\u6D4F\u89C8\u5668\u3001v2rayN\u7B49\u5BA2\u6237\u7AEF\u5361\u6B7B\r\n\t\t\t\t\t\t\t *\r\n\t\t\t\t\t\t\t * Page\u53C2\u6570\uFF1A\u9875\u7801\uFF0C\u5FC5\u987B\u662F\u6574\u6570\uFF0C\u9ED8\u8BA4\u4E3A1\uFF0C\u4ECE1\u5F00\u59CB\uFF0C\u8D85\u51FA\u9875\u7801\u8303\u56F4(\u7531\u7A0B\u5E8F\u52A8\u6001\u8BA1\u7B97)\u5219\u663E\u793ANot found\uFF0C\u6BCF\u9875\u53EF\u4EE5\u5355\u72EC\u4F7F\u7528\r\n\t\t\t\t\t\t\t * maxNode\u53C2\u6570\uFF1A\u6BCF\u9875\u6700\u591A\u7684\u8282\u70B9\u6570\r\n\t\t\t\t\t\t\t *\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tlet maxNodeNumber = url.searchParams.get('maxNode') || 1000; // \u83B7\u53D6get\u8BF7\u6C42\u94FE\u63A5\u4E2D\u7684maxNode\u53C2\u6570(\u6700\u5927\u8282\u70B9\u6570)\r\n\t\t\t\t\t\t\tmaxNodeNumber = maxNodeNumber > 0 && maxNodeNumber <= 5000 ? maxNodeNumber : 1000; // \u9650\u5236\u6700\u5927\u8282\u70B9\u6570\r\n\t\t\t\t\t\t\t// splitArrayEvenly\u51FD\u6570\uFF1AipArray\u6570\u7EC4\u5206\u5272\u6210\u6BCF\u4E2A\u5B50\u6570\u7EC4\u90FD\u4E0D\u8D85\u8FC7maxNode\u7684\u6570\u7EC4(\u5B50\u6570\u7EC4\u4E4B\u95F4\u5143\u7D20\u4E2A\u6570\u5E73\u5747\u5206\u914D)\r\n\t\t\t\t\t\t\tlet chunkedArray = splitArrayEvenly(ipsArray, maxNodeNumber);\r\n\t\t\t\t\t\t\tlet totalPage = Math.ceil(ipsArray.length / maxNodeNumber); // \u8BA1\u7B97\u603B\u9875\u6570\r\n\t\t\t\t\t\t\t// \u5254\u9664\u4E0D\u5408\u6CD5\u7684\uFF0C\u9875\u7801\u8D85\u51FA\u8303\u56F4\uFF0C\u8FD4\u56DE404\r\n\t\t\t\t\t\t\tif (page > totalPage || page < 1) {\r\n\t\t\t\t\t\t\t\treturn new Response('Not found', { status: 404 });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// \u4F7F\u7528\u54EA\u4E2A\u5B50\u6570\u7EC4\u7684\u6570\u636E\uFF1F\r\n\t\t\t\t\t\t\tlet ipsArrayChunked = chunkedArray[page - 1];\r\n\t\t\t\t\t\t\t// \u904D\u5386ipsArray\u751F\u6210vless\u94FE\u63A5\r\n\t\t\t\t\t\t\tlet reusltArray = eachIpsArrayAndGeneratevess(ipsArrayChunked, hostName, portParam, path, userID);\r\n\t\t\t\t\t\t\tlet vessArrayStr = reusltArray.join('\\n');\r\n\t\t\t\t\t\t\t// base64\u7F16\u7801\r\n\t\t\t\t\t\t\tlet encoded = btoa(vessArrayStr);\r\n\t\t\t\t\t\t\treturn new Response(encoded, { status: 200, headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\r\n\t\t\t\t\t\t} else if (target === base64ToUtf8('Y2xhc2g') || target === base64ToUtf8('bWlob21v')) {\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * \u5206\u9875\u521B\u5EFAclash/mihomo\u914D\u7F6E\u6587\u4EF6\uFF0C\u53C2\u6570\u7684\u610F\u601D\u8DDF\u524D\u9762\u7684v2ray\u4E00\u6837\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tlet maxNode = url.searchParams.get('maxNode') || 300;\r\n\t\t\t\t\t\t\tmaxNode = maxNode > 0 && maxNode <= 1000 ? maxNode : 300;\r\n\t\t\t\t\t\t\tlet chunkedArray = splitArrayEvenly(ipsArray, maxNode);\r\n\t\t\t\t\t\t\tlet totalPage = Math.ceil(ipsArray.length / maxNode);\r\n\t\t\t\t\t\t\tif (page > totalPage || page < 1) {\r\n\t\t\t\t\t\t\t\treturn new Response('Not found', { status: 404 });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// \u6293\u53D6clash\u914D\u7F6E\u6A21\u677F\r\n\t\t\t\t\t\t\tlet clashTemplate = await fetchWebPageContent(clashTemplateUrl);\r\n\t\t\t\t\t\t\tlet ipsArrayChunked = chunkedArray[page - 1];\r\n\t\t\t\t\t\t\tlet proxyies = [];\r\n\t\t\t\t\t\t\tlet nodeNameArray = [];\r\n\r\n\t\t\t\t\t\t\t// clash\u7684json\u914D\u7F6E\u7684\u6837\u5B50\r\n\t\t\t\t\t\t\tconst base64String =\r\n\t\t\t\t\t\t\t\t'eyJ0eXBlIjoidmxlc3MiLCJuYW1lIjoiIiwic2VydmVyIjoiIiwicG9ydCI6NDQzLCJ1dWlkIjoiI3V1aWQ0IyIsIm5ldHdvcmsiOiJ3cyIsInRscyI6dHJ1ZSwidWRwIjpmYWxzZSwic2VydmVybmFtZSI6IiIsImNsaWVudC1maW5nZXJwcmludCI6ImNocm9tZSIsIndzLW9wdHMiOnsicGF0aCI6IiNwYXRoIyIsImhlYWRlcnMiOnsiSG9zdCI6IiNIb3N0IyJ9fX0';\r\n\t\t\t\t\t\t\t// 1. \u89E3\u7801Base64\u5B57\u7B26\u4E32\r\n\t\t\t\t\t\t\tconst decodedString = base64ToUtf8(base64String);\r\n\t\t\t\t\t\t\t// 2. \u4F7F\u7528 decodeURIComponent \u5904\u7406\u89E3\u7801\u540E\u7684\u5B57\u7B26\u4E32\r\n\t\t\t\t\t\t\tconst uriDecodedString = decodeURIComponent(decodedString);\r\n\r\n\t\t\t\t\t\t\tfor (let i = 0; i < ipsArrayChunked.length; i++) {\r\n\t\t\t\t\t\t\t\tlet ipaddr = ipsArrayChunked[i];\r\n\r\n\t\t\t\t\t\t\t\tlet randomHttpPortElement = getRandomElement(HTTP_WITH_PORTS);\r\n\t\t\t\t\t\t\t\tlet randomHttpsPortElement = getRandomElement(HTTPS_WITH_PORTS);\r\n\t\t\t\t\t\t\t\tlet port =\r\n\t\t\t\t\t\t\t\t\t([0, ...HTTPS_WITH_PORTS].includes(Number(portParam)) && hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))) ||\r\n\t\t\t\t\t\t\t\t\t([0, ...HTTP_WITH_PORTS].includes(Number(portParam)) && !hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')))\r\n\t\t\t\t\t\t\t\t\t\t? hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))\r\n\t\t\t\t\t\t\t\t\t\t\t? randomHttpPortElement\r\n\t\t\t\t\t\t\t\t\t\t\t: randomHttpsPortElement\r\n\t\t\t\t\t\t\t\t\t\t: portParam;\r\n\t\t\t\t\t\t\t\tlet nodeName = `${ipaddr}:${port}`;\r\n\r\n\t\t\t\t\t\t\t\t// 3. \u5C06\u89E3\u7801\u540E\u7684\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3AJSON\u5BF9\u8C61\r\n\t\t\t\t\t\t\t\tconst jsonObject = JSON.parse(uriDecodedString);\r\n\t\t\t\t\t\t\t\t// 4. \u4FEE\u6539JSON\u5BF9\u8C61\u4E2D\u7684\u503C\r\n\t\t\t\t\t\t\t\tjsonObject.name = nodeName;\r\n\t\t\t\t\t\t\t\tjsonObject.server = ipaddr;\r\n\t\t\t\t\t\t\t\tjsonObject.port = port;\r\n\t\t\t\t\t\t\t\tjsonObject.servername = hostName;\r\n\t\t\t\t\t\t\t\t// \u8981\u66FF\u6362\u7684\u5B57\u7B26\u4E32(\u53E6\u4E00\u79CD\u65B9\u6CD5\u4FEE\u6539)\r\n\t\t\t\t\t\t\t\tlet replacements = {\r\n\t\t\t\t\t\t\t\t\t'#uuid4#': userID,\r\n\t\t\t\t\t\t\t\t\t'#Host#': hostName,\r\n\t\t\t\t\t\t\t\t\t'#path#': decodeURIComponent(path),\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tif (hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))) {\r\n\t\t\t\t\t\t\t\t\tjsonObject.tls = false;\r\n\t\t\t\t\t\t\t\t\tdelete jsonObject.servername;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet modifiedResult = Object.entries(replacements).reduce((acc, [key, value]) => {\r\n\t\t\t\t\t\t\t\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t\t\t\t\t\t\t\t}, `  - ${JSON.stringify(jsonObject)}`);\r\n\t\t\t\t\t\t\t\tproxyies.push(modifiedResult);\r\n\t\t\t\t\t\t\t\tnodeNameArray.push(nodeName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// \u66FF\u6362clash\u6A21\u677F\u4E2D\u7684\u5BF9\u5E94\u7684\u5B57\u7B26\u4E32\uFF0C\u751F\u6210clash\u914D\u7F6E\u6587\u4EF6\r\n\t\t\t\t\t\t\tlet replaceProxyies = clashTemplate.replace(\r\n\t\t\t\t\t\t\t\tnew RegExp(\r\n\t\t\t\t\t\t\t\t\tatob(\r\n\t\t\t\t\t\t\t\t\t\t'ICAtIHtuYW1lOiAwMSwgc2VydmVyOiAxMjcuMC4wLjEsIHBvcnQ6IDgwLCB0eXBlOiBzcywgY2lwaGVyOiBhZXMtMTI4LWdjbSwgcGFzc3dvcmQ6IGExMjM0NTZ9'\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t'g'\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\tproxyies.join('\\n')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tlet clashConfig = replaceProxyies.replace(\r\n\t\t\t\t\t\t\t\tnew RegExp(atob('ICAgICAgLSAwMQ=='), 'g'),\r\n\t\t\t\t\t\t\t\tnodeNameArray.map((ipWithPort) => `      - ${ipWithPort}`).join('\\n')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\treturn new Response(clashConfig, { status: 200, headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\r\n\t\t\t\t\t\t} else if (target === base64ToUtf8('c2luZ2JveA')) {\r\n\t\t\t\t\t\t\t// \u4EE5\u4E0B\u7528\u4E8E\u751F\u6210singbox\u914D\u7F6E\r\n\t\t\t\t\t\t\tlet maxNode = url.searchParams.get('maxNode') || 50;\r\n\t\t\t\t\t\t\tmaxNode = maxNode > 0 && maxNode <= 100 ? maxNode : 50;\r\n\t\t\t\t\t\t\tlet chunkedArray = splitArrayEvenly(ipsArray, maxNode);\r\n\t\t\t\t\t\t\tlet totalPage = Math.ceil(ipsArray.length / maxNode);\r\n\t\t\t\t\t\t\tif (page > totalPage || page < 1) {\r\n\t\t\t\t\t\t\t\treturn new Response('Not found', { status: 404 });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet ipsArrayChunked = chunkedArray[page - 1];\r\n\t\t\t\t\t\t\tlet singbxnodes = [];\r\n\t\t\t\t\t\t\tlet singbxtagname = []; // tag\u7684\u540D\u79F0\uFF0C\u7528\u4E8E\u4EE3\u7406\u5206\u7EC4\uFF0C\u8FD9\u91CC\u7701\u7565\u540E\u7EED\u76F8\u5173\uFF0C\u53EF\u4EE5\u5220\u9664\u5B83\r\n\t\t\t\t\t\t\tfor (let i = 0; i < ipsArrayChunked.length; i++) {\r\n\t\t\t\t\t\t\t\tlet ipaddr = ipsArrayChunked[i];\r\n\t\t\t\t\t\t\t\tlet randomHttpPortElement = getRandomElement(HTTP_WITH_PORTS);\r\n\t\t\t\t\t\t\t\tlet randomHttpsPortElement = getRandomElement(HTTPS_WITH_PORTS);\r\n\t\t\t\t\t\t\t\tlet port =\r\n\t\t\t\t\t\t\t\t\t([0, ...HTTPS_WITH_PORTS].includes(Number(portParam)) && hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))) ||\r\n\t\t\t\t\t\t\t\t\t([0, ...HTTP_WITH_PORTS].includes(Number(portParam)) && !hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')))\r\n\t\t\t\t\t\t\t\t\t\t? hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))\r\n\t\t\t\t\t\t\t\t\t\t\t? randomHttpPortElement\r\n\t\t\t\t\t\t\t\t\t\t\t: randomHttpsPortElement\r\n\t\t\t\t\t\t\t\t\t\t: portParam;\r\n\t\t\t\t\t\t\t\tlet nodeName = `${ipaddr}:${port}`;\r\n\t\t\t\t\t\t\t\tlet onTls = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? false : true;\r\n\t\t\t\t\t\t\t\tlet base64JsonString =\r\n\t\t\t\t\t\t\t\t\t'ICAgIHsNCiAgICAgICJuZXR3b3JrIjogInRjcCIsDQogICAgICAic2VydmVyIjogIiNzZXJ2ZXIjIiwNCiAgICAgICJzZXJ2ZXJfcG9ydCI6ICNwb3J0IywNCiAgICAgICJ0YWciOiAiI3RhZ25hbWUjIiwNCiAgICAgICJ0bHMiOiB7DQogICAgICAgICJlbmFibGVkIjogI29uVGxzIywNCiAgICAgICAgImluc2VjdXJlIjogdHJ1ZSwNCiAgICAgICAgInNlcnZlcl9uYW1lIjogIiNIb3N0IyIsDQogICAgICAgICJ1dGxzIjogew0KICAgICAgICAgICJlbmFibGVkIjogdHJ1ZSwNCiAgICAgICAgICAiZmluZ2VycHJpbnQiOiAiY2hyb21lIg0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgInRyYW5zcG9ydCI6IHsNCiAgICAgICAgImVhcmx5X2RhdGFfaGVhZGVyX25hbWUiOiAiU2VjLVdlYlNvY2tldC1Qcm90b2NvbCIsDQogICAgICAgICJoZWFkZXJzIjogew0KICAgICAgICAgICJIb3N0IjogIiNIb3N0IyINCiAgICAgICAgfSwNCiAgICAgICAgInBhdGgiOiAiI3BhdGgjIiwNCiAgICAgICAgInR5cGUiOiAid3MiDQogICAgICB9LA0KICAgICAgInR5cGUiOiAidmxlc3MiLA0KICAgICAgInV1aWQiOiAiI3V1aWQ0IyINCiAgICB9';\r\n\t\t\t\t\t\t\t\t// \u8981\u66FF\u6362\u7684\u5B57\u7B26\u4E32\r\n\t\t\t\t\t\t\t\tlet replacements = {\r\n\t\t\t\t\t\t\t\t\t'#server#': ipaddr,\r\n\t\t\t\t\t\t\t\t\t'#port#': port,\r\n\t\t\t\t\t\t\t\t\t'#uuid4#': userID,\r\n\t\t\t\t\t\t\t\t\t'#Host#': hostName,\r\n\t\t\t\t\t\t\t\t\t'#onTls#': onTls,\r\n\t\t\t\t\t\t\t\t\t'#path#': decodeURIComponent(path),\r\n\t\t\t\t\t\t\t\t\t'#tagname#': nodeName,\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tlet singbxNode = Object.entries(replacements).reduce((acc, [key, value]) => {\r\n\t\t\t\t\t\t\t\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t\t\t\t\t\t\t\t}, base64ToUtf8(base64JsonString));\r\n\t\t\t\t\t\t\t\tsingbxnodes.push(singbxNode);\r\n\t\t\t\t\t\t\t\tsingbxtagname.push(nodeName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet singbxconfig = base64ToUtf8('ew0KICAib3V0Ym91bmRzIjogWw0KI291dGJkcyMNCiAgXQ0KfQ').replace(\r\n\t\t\t\t\t\t\t\t'#outbds#',\r\n\t\t\t\t\t\t\t\tsingbxnodes.join(',\\n')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\treturn new Response(singbxconfig, { status: 200, headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn new Response('Not found', { status: 404 });\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst pathString = url.pathname;\r\n\t\t\t\t// \u4ECEv2rayN\u5BA2\u6237\u7AEF\u7684path\u4E2D\uFF0C\u63D0\u53D6\u5E76\u4FEE\u6539\u539F\u6765\u7684landingAddress\u6216socks5\u7684\u5730\u5740\r\n\t\t\t\tif (pathString.includes('/pyip=')) {\r\n\t\t\t\t\tconst pathpathLandingaddr = pathString.split('=')[1];\r\n\t\t\t\t\tif (isValidlandingAddress(pathpathLandingaddr)) {\r\n\t\t\t\t\t\tlandingAddress = pathpathLandingaddr;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (pathString.includes('/socks=')) {\r\n\t\t\t\t\tconst pathSocks = pathString.split('=')[1];\r\n\t\t\t\t\tconst matchSocks = (socksAddress) => {\r\n\t\t\t\t\t\t// \u540E\u9762\u8FD9\u4E9B\u60C5\u51B5\u90FD\u80FD\u51C6\u786E\u63D0\u53D6socks\u5730\u5740\u3002\u4F8B\u5982\uFF1Asocks://127.0.0.1:8080\u3001socks://user:pass@127.0.0.1:8080\u3001user:pass@127.0.0.1:8080\u3001127.0.0.1:8080\r\n\t\t\t\t\t\tconst regex =\r\n\t\t\t\t\t\t\t/^(?:socks:\\/\\/)?(?:([a-zA-Z0-9._%+-]+):([a-zA-Z0-9._%+-]+)@)?([0-9]{1,3}(?:\\.[0-9]{1,3}){3}:\\d+|[a-zA-Z0-9.-]+:\\d+)$/;\r\n\t\t\t\t\t\tconst match = socksAddress.match(regex);\r\n\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\tconst [_, username, password, address] = match;\r\n\t\t\t\t\t\t\t// \u8FD4\u56DE\u6709\u7528\u6237\u8BA4\u8BC1\u7684\"user:pass@host:port\"\u3001\u65E0\u7528\u6237\u8BA4\u8BC1\u7684\":@host:port\"\r\n\t\t\t\t\t\t\treturn username && password ? `${username}:${password}@${address}` : `:@${address}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t};\r\n\t\t\t\t\tlet socksAddress = matchSocks(pathSocks);\r\n\t\t\t\t\tif (socksAddress.length !== 0) {\r\n\t\t\t\t\t\tparsedSocks5Address = socks5AddressParser(socksAddress); // \u89E3\u6790socks5\u5730\u5740\uFF0C{ username, password, hostname, port }\r\n\t\t\t\t\t\tenableSocks = true; // \u5F00\u542Fsocks\uFF0C\u4F7F\u7528socks5\u4EE3\u7406\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn await a1(request);\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\treturn new Response(err.toString());\r\n\t\t}\r\n\t},\r\n};\r\n\r\nasync function a1(request) {\r\n\tconst webSocketPair = new WebSocketPair();\r\n\tconst [client, webSocket] = Object.values(webSocketPair);\r\n\twebSocket.accept();\r\n\tlet address = '';\r\n\tlet portWithRandomLog = '';\r\n\tconst log = (info, event) => {\r\n\t\tconsole.log(`[${address}:${portWithRandomLog}] ${info}`, event || '');\r\n\t};\r\n\tconst earlyDataHeader = request.headers.get('sec-websocket-protocol') || '';\r\n\tconst readableWebSocketStream = makeReadableWebSocketStream(webSocket, earlyDataHeader, log);\r\n\tlet remoteSocketWapper = {\r\n\t\tvalue: null,\r\n\t};\r\n\tlet isDns = false;\r\n\tlet udpStreamWrite = null;\r\n\treadableWebSocketStream\r\n\t\t.pipeTo(\r\n\t\t\tnew WritableStream({\r\n\t\t\t\tasync write(chunk, controller) {\r\n\t\t\t\t\tif (isDns && udpStreamWrite) {\r\n\t\t\t\t\t\treturn udpStreamWrite(chunk);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (remoteSocketWapper.value) {\r\n\t\t\t\t\t\tconst writer = remoteSocketWapper.value.writable.getWriter();\r\n\t\t\t\t\t\tawait writer.write(chunk);\r\n\t\t\t\t\t\twriter.releaseLock();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst {\r\n\t\t\t\t\t\thasError,\r\n\t\t\t\t\t\tmessage,\r\n\t\t\t\t\t\taddressType,\r\n\t\t\t\t\t\tportRemote = 443,\r\n\t\t\t\t\t\taddressRemote = '',\r\n\t\t\t\t\t\trawDataIndex,\r\n\t\t\t\t\t\tvessVersion = new Uint8Array([0, 0]),\r\n\t\t\t\t\t\tisUDP,\r\n\t\t\t\t\t} = processvessHeader(chunk, userID);\r\n\t\t\t\t\taddress = addressRemote;\r\n\t\t\t\t\tportWithRandomLog = `${portRemote}--${Math.random()} ${isUDP ? 'udp ' : 'tcp '}`;\r\n\t\t\t\t\tif (hasError) {\r\n\t\t\t\t\t\tthrow new Error(message);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isUDP) {\r\n\t\t\t\t\t\tif (portRemote === 53) {\r\n\t\t\t\t\t\t\tisDns = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error('UDP proxy only enable for DNS which is port 53');\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst vessResponseHeader = new Uint8Array([vessVersion[0], 0]);\r\n\t\t\t\t\tconst rawClientData = chunk.slice(rawDataIndex);\r\n\t\t\t\t\tif (isDns) {\r\n\t\t\t\t\t\tconst { write } = await handleUDPOutBound(webSocket, vessResponseHeader, log);\r\n\t\t\t\t\t\tudpStreamWrite = write;\r\n\t\t\t\t\t\tudpStreamWrite(rawClientData);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandleTCPOutBound(remoteSocketWapper, addressType, addressRemote, portRemote, rawClientData, webSocket, vessResponseHeader, log);\r\n\t\t\t\t},\r\n\t\t\t\tclose() {\r\n\t\t\t\t\t// log(`readableWebSocketStream is close`);\r\n\t\t\t\t},\r\n\t\t\t\tabort(reason) {\r\n\t\t\t\t\t// log(`readableWebSocketStream is abort`, JSON.stringify(reason));\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((err) => {\r\n\t\t\t// log('readableWebSocketStream pipeTo error', err);\r\n\t\t});\r\n\treturn new Response(null, { status: 101, webSocket: client });\r\n}\r\n\r\nasync function handleTCPOutBound(remoteSocket, addressType, addressRemote, portRemote, rawClientData, webSocket, vessResponseHeader, log) {\r\n\tasync function connectAndWrite(address, port, socks = false) {\r\n\t\tconst tcpSocket = socks\r\n\t\t\t? await socks5Connect(addressType, address, port, log)\r\n\t\t\t: connect({\r\n\t\t\t\t\thostname: address,\r\n\t\t\t\t\tport: port,\r\n\t\t\t  });\r\n\t\tremoteSocket.value = tcpSocket;\r\n\t\t// log(`connected to ${address}:${port}`);\r\n\t\tconst writer = tcpSocket.writable.getWriter();\r\n\t\tawait writer.write(rawClientData);\r\n\t\twriter.releaseLock();\r\n\t\treturn tcpSocket;\r\n\t}\r\n\r\n\tasync function retry() {\r\n\t\tif (enableSocks) {\r\n\t\t\ttcpSocket = await connectAndWrite(addressRemote, portRemote, true);\r\n\t\t} else {\r\n\t\t\t// \u5206\u79BBlandingAddress\u7684host\u548Cport\u7AEF\u53E3\r\n\t\t\tlet pxAddressJSON = parselandingAddress(landingAddress);\r\n\t\t\ttcpSocket = await connectAndWrite(pxAddressJSON.host || addressRemote, pxAddressJSON.port || portRemote);\r\n\t\t}\r\n\t\ttcpSocket.closed\r\n\t\t\t.catch((error) => {\r\n\t\t\t\t// console.log('retry tcpSocket closed error', error);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsafeCloseWebSocket(webSocket);\r\n\t\t\t});\r\n\t\tremoteSocketToWS(tcpSocket, webSocket, vessResponseHeader, null, log);\r\n\t}\r\n\r\n\tlet tcpSocket = await connectAndWrite(addressRemote, portRemote);\r\n\tremoteSocketToWS(tcpSocket, webSocket, vessResponseHeader, retry, log);\r\n}\r\n\r\nfunction makeReadableWebSocketStream(webSocketServer, earlyDataHeader, log) {\r\n\tlet readableStreamCancel = false;\r\n\tconst stream = new ReadableStream({\r\n\t\tstart(controller) {\r\n\t\t\twebSocketServer.addEventListener('message', (event) => {\r\n\t\t\t\tif (readableStreamCancel) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst message = event.data;\r\n\t\t\t\tcontroller.enqueue(message);\r\n\t\t\t});\r\n\r\n\t\t\twebSocketServer.addEventListener('close', () => {\r\n\t\t\t\tsafeCloseWebSocket(webSocketServer);\r\n\t\t\t\tif (readableStreamCancel) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcontroller.close();\r\n\t\t\t});\r\n\t\t\twebSocketServer.addEventListener('error', (err) => {\r\n\t\t\t\t// log('webSocketServer has error');\r\n\t\t\t\tcontroller.error(err);\r\n\t\t\t});\r\n\t\t\tconst { earlyData, error } = base64ToArrayBuffer(earlyDataHeader);\r\n\t\t\tif (error) {\r\n\t\t\t\tcontroller.error(error);\r\n\t\t\t} else if (earlyData) {\r\n\t\t\t\tcontroller.enqueue(earlyData);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpull(controller) {\r\n\t\t\t// if ws can stop read if stream is full, we can implement backpressure\r\n\t\t\t// https://streams.spec.whatwg.org/#example-rs-push-backpressure\r\n\t\t},\r\n\t\tcancel(reason) {\r\n\t\t\tif (readableStreamCancel) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// log(`ReadableStream was canceled, due to ${reason}`);\r\n\t\t\treadableStreamCancel = true;\r\n\t\t\tsafeCloseWebSocket(webSocketServer);\r\n\t\t},\r\n\t});\r\n\r\n\treturn stream;\r\n}\r\n\r\nfunction processvessHeader(vessBuffer, userID) {\r\n\tif (vessBuffer.byteLength < 24) {\r\n\t\treturn { hasError: true, message: 'invalid data' };\r\n\t}\r\n\tconst version = new Uint8Array(vessBuffer.slice(0, 1));\r\n\tlet isValidUser = false;\r\n\tlet isUDP = false;\r\n\tif (stringify(new Uint8Array(vessBuffer.slice(1, 17))) === userID) {\r\n\t\tisValidUser = true;\r\n\t}\r\n\tif (!isValidUser) {\r\n\t\treturn { hasError: true, message: 'invalid user' };\r\n\t}\r\n\r\n\tconst optLength = new Uint8Array(vessBuffer.slice(17, 18))[0];\r\n\tconst command = new Uint8Array(vessBuffer.slice(18 + optLength, 18 + optLength + 1))[0];\r\n\tif (command === 1) {\r\n\t\t//\r\n\t} else if (command === 2) {\r\n\t\tisUDP = true;\r\n\t} else {\r\n\t\treturn {\r\n\t\t\thasError: true,\r\n\t\t\tmessage: `command ${command} is not support, command 01-tcp,02-udp,03-mux`,\r\n\t\t};\r\n\t}\r\n\tconst portIndex = 18 + optLength + 1;\r\n\tconst portBuffer = vessBuffer.slice(portIndex, portIndex + 2);\r\n\tconst portRemote = new DataView(portBuffer).getUint16(0);\r\n\tlet addressIndex = portIndex + 2;\r\n\tconst addressBuffer = new Uint8Array(vessBuffer.slice(addressIndex, addressIndex + 1));\r\n\r\n\tconst addressType = addressBuffer[0];\r\n\tlet addressLength = 0;\r\n\tlet addressValueIndex = addressIndex + 1;\r\n\tlet addressValue = '';\r\n\tswitch (addressType) {\r\n\t\tcase 1:\r\n\t\t\taddressLength = 4;\r\n\t\t\taddressValue = new Uint8Array(vessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)).join('.');\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\taddressLength = new Uint8Array(vessBuffer.slice(addressValueIndex, addressValueIndex + 1))[0];\r\n\t\t\taddressValueIndex += 1;\r\n\t\t\taddressValue = new TextDecoder().decode(vessBuffer.slice(addressValueIndex, addressValueIndex + addressLength));\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\taddressLength = 16;\r\n\t\t\tconst dataView = new DataView(vessBuffer.slice(addressValueIndex, addressValueIndex + addressLength));\r\n\t\t\tconst ipv6 = [];\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tipv6.push(dataView.getUint16(i * 2).toString(16));\r\n\t\t\t}\r\n\t\t\taddressValue = ipv6.join(':');\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn { hasError: true, message: `invild  addressType is ${addressType}` };\r\n\t}\r\n\tif (!addressValue) {\r\n\t\treturn { hasError: true, message: `addressValue is empty, addressType is ${addressType}` };\r\n\t}\r\n\r\n\treturn {\r\n\t\thasError: false,\r\n\t\taddressRemote: addressValue,\r\n\t\taddressType,\r\n\t\tportRemote,\r\n\t\trawDataIndex: addressValueIndex + addressLength,\r\n\t\tvessVersion: version,\r\n\t\tisUDP,\r\n\t};\r\n}\r\n\r\nasync function remoteSocketToWS(remoteSocket, webSocket, vessResponseHeader, retry, log) {\r\n\tlet remoteChunkCount = 0;\r\n\tlet chunks = [];\r\n\tlet vessHeader = vessResponseHeader;\r\n\tlet hasIncomingData = false;\r\n\tawait remoteSocket.readable\r\n\t\t.pipeTo(\r\n\t\t\tnew WritableStream({\r\n\t\t\t\tstart() {\r\n\t\t\t\t\t//\r\n\t\t\t\t},\r\n\t\t\t\tasync write(chunk, controller) {\r\n\t\t\t\t\thasIncomingData = true;\r\n\t\t\t\t\tif (webSocket.readyState !== WS_READY_STATE_OPEN) {\r\n\t\t\t\t\t\tcontroller.error('webSocket.readyState is not open, maybe close');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (vessHeader) {\r\n\t\t\t\t\t\twebSocket.send(await new Blob([vessHeader, chunk]).arrayBuffer());\r\n\t\t\t\t\t\tvessHeader = null;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\twebSocket.send(chunk);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tclose() {\r\n\t\t\t\t\t// log(`remoteConnection!.readable is close with hasIncomingData is ${hasIncomingData}`);\r\n\t\t\t\t},\r\n\t\t\t\tabort(reason) {\r\n\t\t\t\t\tconsole.error(`remoteConnection!.readable abort`, reason);\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(`remoteSocketToWS has exception `, error.stack || error);\r\n\t\t\tsafeCloseWebSocket(webSocket);\r\n\t\t});\r\n\r\n\tif (hasIncomingData === false && retry) {\r\n\t\t// log(`retry`);\r\n\t\tretry();\r\n\t}\r\n}\r\n\r\nfunction base64ToArrayBuffer(base64Str) {\r\n\tif (!base64Str) {\r\n\t\treturn { error: null };\r\n\t}\r\n\ttry {\r\n\t\tbase64Str = base64Str.replace(/-/g, '+').replace(/_/g, '/');\r\n\t\tconst decode = atob(base64Str);\r\n\t\tconst arryBuffer = Uint8Array.from(decode, (c) => c.charCodeAt(0));\r\n\t\treturn { earlyData: arryBuffer.buffer, error: null };\r\n\t} catch (error) {\r\n\t\treturn { error };\r\n\t}\r\n}\r\n\r\nfunction isValidUUID(uuid4) {\r\n\tconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n\treturn uuidRegex.test(uuid4);\r\n}\r\n\r\nconst WS_READY_STATE_OPEN = 1;\r\nconst WS_READY_STATE_CLOSING = 2;\r\n\r\nfunction safeCloseWebSocket(socket) {\r\n\ttry {\r\n\t\tif (socket.readyState === WS_READY_STATE_OPEN || socket.readyState === WS_READY_STATE_CLOSING) {\r\n\t\t\tsocket.close();\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error('safeCloseWebSocket error', error);\r\n\t}\r\n}\r\n\r\nconst byteToHex = [];\r\nfor (let i = 0; i < 256; ++i) {\r\n\tbyteToHex.push((i + 256).toString(16).slice(1));\r\n}\r\n\r\nfunction unsafeStringify(arr, offset = 0) {\r\n\treturn (\r\n\t\tbyteToHex[arr[offset + 0]] +\r\n\t\tbyteToHex[arr[offset + 1]] +\r\n\t\tbyteToHex[arr[offset + 2]] +\r\n\t\tbyteToHex[arr[offset + 3]] +\r\n\t\t'-' +\r\n\t\tbyteToHex[arr[offset + 4]] +\r\n\t\tbyteToHex[arr[offset + 5]] +\r\n\t\t'-' +\r\n\t\tbyteToHex[arr[offset + 6]] +\r\n\t\tbyteToHex[arr[offset + 7]] +\r\n\t\t'-' +\r\n\t\tbyteToHex[arr[offset + 8]] +\r\n\t\tbyteToHex[arr[offset + 9]] +\r\n\t\t'-' +\r\n\t\tbyteToHex[arr[offset + 10]] +\r\n\t\tbyteToHex[arr[offset + 11]] +\r\n\t\tbyteToHex[arr[offset + 12]] +\r\n\t\tbyteToHex[arr[offset + 13]] +\r\n\t\tbyteToHex[arr[offset + 14]] +\r\n\t\tbyteToHex[arr[offset + 15]]\r\n\t).toLowerCase();\r\n}\r\nfunction stringify(arr, offset = 0) {\r\n\tconst uuid4 = unsafeStringify(arr, offset);\r\n\tif (!isValidUUID(uuid4)) {\r\n\t\tthrow TypeError('Stringified UUID4 is invalid');\r\n\t}\r\n\treturn uuid4;\r\n}\r\n\r\nasync function handleUDPOutBound(webSocket, vessResponseHeader, log) {\r\n\tlet isvessHeaderSent = false;\r\n\r\n\tconst transformStream = new TransformStream({\r\n\t\tstart(controller) {},\r\n\t\ttransform(chunk, controller) {\r\n\t\t\t// udp message 2 byte is the the length of udp data\r\n\t\t\t// TODO: this should have bug, beacsue maybe udp chunk can be in two websocket message\r\n\t\t\tfor (let index = 0; index < chunk.byteLength; ) {\r\n\t\t\t\tconst lengthBuffer = chunk.slice(index, index + 2);\r\n\t\t\t\tconst udpPakcetLength = new DataView(lengthBuffer).getUint16(0);\r\n\t\t\t\tconst udpData = new Uint8Array(chunk.slice(index + 2, index + 2 + udpPakcetLength));\r\n\t\t\t\tindex = index + 2 + udpPakcetLength;\r\n\t\t\t\tcontroller.enqueue(udpData);\r\n\t\t\t}\r\n\t\t},\r\n\t\tflush(controller) {},\r\n\t});\r\n\r\n\t// only handle dns udp for now\r\n\ttransformStream.readable\r\n\t\t.pipeTo(\r\n\t\t\tnew WritableStream({\r\n\t\t\t\tasync write(chunk) {\r\n\t\t\t\t\t// e.g: dohURL = 'https://1.1.1.1/dns-query';\r\n\t\t\t\t\tconst resp = await fetch(dohURL, {\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'content-type': 'application/dns-message',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbody: chunk,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst dnsQueryResult = await resp.arrayBuffer();\r\n\t\t\t\t\tconst udpSize = dnsQueryResult.byteLength;\r\n\t\t\t\t\tconst udpSizeBuffer = new Uint8Array([(udpSize >> 8) & 0xff, udpSize & 0xff]);\r\n\t\t\t\t\tif (webSocket.readyState === WS_READY_STATE_OPEN) {\r\n\t\t\t\t\t\t// log(`doh success and dns message length is ${udpSize}`);\r\n\t\t\t\t\t\tif (isvessHeaderSent) {\r\n\t\t\t\t\t\t\twebSocket.send(await new Blob([udpSizeBuffer, dnsQueryResult]).arrayBuffer());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\twebSocket.send(await new Blob([vessResponseHeader, udpSizeBuffer, dnsQueryResult]).arrayBuffer());\r\n\t\t\t\t\t\t\tisvessHeaderSent = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((error) => {\r\n\t\t\t// log('dns udp has error' + error);\r\n\t\t});\r\n\r\n\tconst writer = transformStream.writable.getWriter();\r\n\r\n\treturn {\r\n\t\twrite(chunk) {\r\n\t\t\twriter.write(chunk);\r\n\t\t},\r\n\t};\r\n}\r\n\r\nasync function socks5Connect(addressType, addressRemote, portRemote, log) {\r\n\tconst { username, password, hostname, port } = parsedSocks5Address;\r\n\tconst socket = connect({ hostname, port });\r\n\tconst socksGreeting = new Uint8Array([5, 2, 0, 2]);\r\n\tconst writer = socket.writable.getWriter();\r\n\tawait writer.write(socksGreeting);\r\n\t// log('sent socks greeting');\r\n\r\n\tconst reader = socket.readable.getReader();\r\n\tconst encoder = new TextEncoder();\r\n\tlet res = (await reader.read()).value;\r\n\tif (res[0] !== 0x05) {\r\n\t\t// log(`socks server version error: ${res[0]} expected: 5`);\r\n\t\treturn;\r\n\t}\r\n\tif (res[1] === 0xff) {\r\n\t\t// log('no acceptable methods');\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (res[1] === 0x02) {\r\n\t\t// log('socks server needs auth');\r\n\t\tif (!username || !password) {\r\n\t\t\t// log('please provide username/password');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst authRequest = new Uint8Array([1, username.length, ...encoder.encode(username), password.length, ...encoder.encode(password)]);\r\n\t\tawait writer.write(authRequest);\r\n\t\tres = (await reader.read()).value;\r\n\t\tif (res[0] !== 0x01 || res[1] !== 0x00) {\r\n\t\t\t// log('fail to auth socks server');\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tlet DSTADDR;\r\n\tswitch (addressType) {\r\n\t\tcase 1:\r\n\t\t\tDSTADDR = new Uint8Array([1, ...addressRemote.split('.').map(Number)]);\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tDSTADDR = new Uint8Array([3, addressRemote.length, ...encoder.encode(addressRemote)]);\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tDSTADDR = new Uint8Array([4, ...addressRemote.split(':').flatMap((x) => [parseInt(x.slice(0, 2), 16), parseInt(x.slice(2), 16)])]);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// log(`invild  addressType is ${addressType}`);\r\n\t\t\treturn;\r\n\t}\r\n\tconst socksRequest = new Uint8Array([5, 1, 0, ...DSTADDR, portRemote >> 8, portRemote & 0xff]);\r\n\tawait writer.write(socksRequest);\r\n\t// log('sent socks request');\r\n\tres = (await reader.read()).value;\r\n\tif (res[1] === 0x00) {\r\n\t\t// log('socks connection opened');\r\n\t} else {\r\n\t\t// log('fail to open socks connection');\r\n\t\treturn;\r\n\t}\r\n\twriter.releaseLock();\r\n\treader.releaseLock();\r\n\treturn socket;\r\n}\r\n\r\nfunction socks5AddressParser(address) {\r\n\tlet [latter, former] = address.split('@').reverse();\r\n\tlet username, password, hostname, port;\r\n\tif (former) {\r\n\t\tconst formers = former.split(':');\r\n\t\tif (formers.length !== 2) {\r\n\t\t\tthrow new Error('Invalid SOCKS address format');\r\n\t\t}\r\n\t\t[username, password] = formers;\r\n\t}\r\n\tconst latters = latter.split(':');\r\n\tport = Number(latters.pop());\r\n\tif (isNaN(port)) {\r\n\t\tthrow new Error('Invalid SOCKS address format');\r\n\t}\r\n\thostname = latters.join(':');\r\n\tconst regex = /^\\[.*\\]$/;\r\n\tif (hostname.includes(':') && !regex.test(hostname)) {\r\n\t\tthrow new Error('Invalid SOCKS address format');\r\n\t}\r\n\treturn { username, password, hostname, port };\r\n}\r\n\r\n/**\r\n * @param {string} userID\r\n * @param {string | null} hostName\r\n * @returns {string}\r\n */\r\nfunction getBaseConfig(userID, hostName) {\r\n\tlet server = 'www.visa.com.sg';\r\n\tlet port = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? 8080 : 443;\r\n\r\n\tlet base64LinkIstls =\r\n\t\t'dmxlc3M6Ly8jdXVpZDQjQCNzZXJ2ZXIjOiNwb3J0Iz9lbmNyeXB0aW9uPW5vbmUmc2VjdXJpdHk9dGxzJnNuaT0jaG9zdE5hbWUjJmZwPWNocm9tZSZhbGxvd0luc2VjdXJlPTEmdHlwZT13cyZob3N0PSNob3N0TmFtZSMmcGF0aD0jcGF0aCM';\r\n\tlet base64LinkNottls =\r\n\t\t'dmxlc3M6Ly8jdXVpZDQjQCNzZXJ2ZXIjOiNwb3J0Iz9lbmNyeXB0aW9uPW5vbmUmc2VjdXJpdHk9bm9uZSZmcD1jaHJvbWUmYWxsb3dJbnNlY3VyZT0xJnR5cGU9d3MmaG9zdD0jaG9zdE5hbWUjJnBhdGg9I3BhdGgj';\r\n\tlet base64YamlsIstls =\r\n\t\t'LSB0eXBlOiB2bGVzcw0KICBuYW1lOiAjc2VydmVyIw0KICBzZXJ2ZXI6ICNzZXJ2ZXIjDQogIHBvcnQ6ICNwb3J0Iw0KICB1dWlkOiAjdXVpZDQjDQogIG5ldHdvcms6IHdzDQogIHRsczogdHJ1ZQ0KICB1ZHA6IGZhbHNlDQogIHNlcnZlcm5hbWU6ICNob3N0TmFtZSMNCiAgY2xpZW50LWZpbmdlcnByaW50OiBjaHJvbWUNCiAgd3Mtb3B0czoNCiAgICBwYXRoOiAiLz9lZD0yMDQ4Ig0KICAgIGhlYWRlcnM6DQogICAgICBob3N0OiAjaG9zdE5hbWUj';\r\n\tlet base64YamlNottls =\r\n\t\t'LSB0eXBlOiB2bGVzcw0KICBuYW1lOiAjc2VydmVyIw0KICBzZXJ2ZXI6ICNzZXJ2ZXIjDQogIHBvcnQ6ICNwb3J0Iw0KICB1dWlkOiAjdXVpZDQjDQogIG5ldHdvcms6IHdzDQogIHRsczogZmFsc2UNCiAgdWRwOiBmYWxzZQ0KICBjbGllbnQtZmluZ2VycHJpbnQ6IGNocm9tZQ0KICB3cy1vcHRzOg0KICAgIHBhdGg6ICIvP2VkPTIwNDgiDQogICAgaGVhZGVyczoNCiAgICAgIGhvc3Q6ICNob3N0TmFtZSM';\r\n\tlet base64JsonString =\r\n\t\t'ew0KICAib3V0Ym91bmRzIjogWw0KICAgIHsNCiAgICAgICJuZXR3b3JrIjogInRjcCIsDQogICAgICAic2VydmVyIjogIiNzZXJ2ZXIjIiwNCiAgICAgICJzZXJ2ZXJfcG9ydCI6ICNwb3J0IywNCiAgICAgICJ0YWciOiAiI3NlcnZlciMiLA0KICAgICAgInRscyI6IHsNCiAgICAgICAgImVuYWJsZWQiOiAjb25UbHMjLA0KICAgICAgICAiaW5zZWN1cmUiOiB0cnVlLA0KICAgICAgICAic2VydmVyX25hbWUiOiAiI0hvc3QjIiwNCiAgICAgICAgInV0bHMiOiB7DQogICAgICAgICAgImVuYWJsZWQiOiB0cnVlLA0KICAgICAgICAgICJmaW5nZXJwcmludCI6ICJjaHJvbWUiDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICAidHJhbnNwb3J0Ijogew0KICAgICAgICAiZWFybHlfZGF0YV9oZWFkZXJfbmFtZSI6ICJTZWMtV2ViU29ja2V0LVByb3RvY29sIiwNCiAgICAgICAgImhlYWRlcnMiOiB7DQogICAgICAgICAgIkhvc3QiOiAiI0hvc3QjIg0KICAgICAgICB9LA0KICAgICAgICAicGF0aCI6ICIjcGF0aCMiLA0KICAgICAgICAidHlwZSI6ICJ3cyINCiAgICAgIH0sDQogICAgICAidHlwZSI6ICJ2bGVzcyIsDQogICAgICAidXVpZCI6ICIjdXVpZDQjIg0KICAgIH0NCiAgXQ0KfQ';\r\n\r\n\tlet onTls = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? false : true;\r\n\tlet base64LinkString = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? base64LinkNottls : base64LinkIstls;\r\n\tlet base64YamlString = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? base64YamlNottls : base64YamlsIstls;\r\n\r\n\tlet replacements = {\r\n\t\t'#uuid4#': userID,\r\n\t\t'#server#': server,\r\n\t\t'#port#': port,\r\n\t\t'#hostName#': hostName,\r\n\t\t'#path#': '%2F%3Fed%3D2048',\r\n\t};\r\n\tlet finallyLink =\r\n\t\tObject.entries(replacements).reduce((acc, [key, value]) => {\r\n\t\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t\t}, base64ToUtf8(base64LinkString)) +\r\n\t\t'#' +\r\n\t\tencodeURIComponent(`${server}:${port}`);\r\n\tlet finallyYaml = Object.entries(replacements).reduce((acc, [key, value]) => {\r\n\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t}, base64ToUtf8(base64YamlString));\r\n\r\n\t// \u8981\u66FF\u6362\u7684\u5B57\u7B26\u4E32\r\n\tlet replacementsSingbx = {\r\n\t\t'#server#': server,\r\n\t\t'#port#': port,\r\n\t\t'#uuid4#': userID,\r\n\t\t'#Host#': hostName,\r\n\t\t'#onTls#': onTls,\r\n\t\t'#path#': decodeURIComponent('%2F%3Fed%3D2048'),\r\n\t};\r\n\tlet finallyJson = Object.entries(replacementsSingbx).reduce((acc, [key, value]) => {\r\n\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t}, base64ToUtf8(base64JsonString));\r\n\treturn `\r\n################################################################\r\n${base64ToUtf8('djJyYXk')}\r\n---------------------------------------------------------------\r\n${finallyLink}\r\n---------------------------------------------------------------\r\n################################################################\r\n${base64ToUtf8('c2luZy1ib3g')}\r\n---------------------------------------------------------------\r\n${finallyJson}\r\n---------------------------------------------------------------\r\n################################################################\r\n${base64ToUtf8('Y2xhc2gubWV0YShtaWhvbW8p')}\r\n---------------------------------------------------------------\r\n${finallyYaml}\r\n---------------------------------------------------------------\r\n################################################################\r\n`;\r\n}\r\n\r\n/**\r\n * \u6839\u636ECIDR\u683C\u5F0F\u7684\u5B57\u7B26\u4E32\u751F\u6210\u6240\u6709IP\u5730\u5740\u3002\r\n * @param {string} cidr - CIDR\u683C\u5F0F\u7684\u5B57\u7B26\u4E32\uFF0C\u4F8B\u5982\"192.168.0.1/24\"\u3002\r\n * @returns {Array<string>} \u7531\u6240\u6709\u5B50\u7F51IP\u5730\u5740\u7EC4\u6210\u7684\u6570\u7EC4\u3002\u5982\u679C\u8F93\u5165\u4E0D\u662F\u6709\u6548\u7684CIDR\u683C\u5F0F\uFF0C\u5219\u8FD4\u56DE\u7A7A\u6570\u7EC4\u3002\r\n */\r\nfunction generateAllIpsFromCidr(cidr) {\r\n\tconst cidrMatch = cidr.match(/^(\\d+\\.\\d+\\.\\d+\\.\\d+)\\/(\\d+)$/);\r\n\tif (!cidrMatch) return [];\r\n\tconst baseIp = cidrMatch[1];\r\n\tconst subnetMask = Number(cidrMatch[2]);\r\n\tconst ipArray = baseIp.split('.').map(Number);\r\n\tconst maskBits = 32 - subnetMask;\r\n\tconst maxSubnetSize = Math.pow(2, maskBits) - 2;\r\n\tconst baseIpNum = ipArray.reduce((sum, num, idx) => sum + (num << ((3 - idx) * 8)), 0);\r\n\tconst ips = [];\r\n\tfor (let i = 1; i <= maxSubnetSize; i++) {\r\n\t\tconst ipNum = baseIpNum + i;\r\n\t\tconst ip = [(ipNum >>> 24) & 255, (ipNum >>> 16) & 255, (ipNum >>> 8) & 255, ipNum & 255].join('.');\r\n\t\tips.push(ip);\r\n\t}\r\n\r\n\treturn ips;\r\n}\r\n\r\n/**\r\n * \u4ECECIDR\u5217\u8868\u751F\u6210\u6307\u5B9A\u6570\u91CF\u7684\u968F\u673AIP\u5730\u5740\u6570\u7EC4\u3002\r\n * @param {Array} cidrList - CIDR\u683C\u5F0F\u7684IP\u5730\u5740\u8303\u56F4\u5217\u8868\uFF0C\u4F8B\u5982[\"192.168.0.0/24\", \"10.0.0.0/16\"]\u3002\r\n * @param {number} count - \u9700\u8981\u751F\u6210\u7684\u968F\u673AIP\u5730\u5740\u6570\u91CF\u3002\r\n * @returns {Array} - \u5305\u542B\u6307\u5B9A\u6570\u91CF\u4E14\u4E0D\u91CD\u590D\u7684\u968F\u673AIP\u5730\u5740\u7684\u6570\u7EC4\u3002\r\n */\r\nfunction randomIpsFromCidrList(cidrList, count) {\r\n\tconst allIps = cidrList.map(generateAllIpsFromCidr).flat();\r\n\tconst uniqueIps = new Set();\r\n\twhile (uniqueIps.size < count && uniqueIps.size < allIps.length) {\r\n\t\tconst randomIndex = Math.floor(Math.random() * allIps.length);\r\n\t\tuniqueIps.add(allIps[randomIndex]);\r\n\t}\r\n\r\n\treturn [...uniqueIps];\r\n}\r\n\r\n/**\r\n * \u5C06IPv4\u5730\u5740\u8F6C\u6362\u6210\u6570\u5B57\u8868\u793A\u5F62\u5F0F\u3002\r\n * @param {string} ip - IPv4\u5730\u5740\uFF0C\u683C\u5F0F\u4E3Axxx.xxx.xxx.xxx\uFF0C\u5176\u4E2Dxxx\u4E3A0-255\u4E4B\u95F4\u7684\u6574\u6570\u3002\r\n * @returns {number} - \u8FD4\u56DE\u5BF9\u5E94IPv4\u5730\u5740\u7684\u6570\u5B57\u8868\u793A\u5F62\u5F0F\u3002\r\n */\r\nfunction ipToNumber(ip) {\r\n\treturn ip.split('.').reduce((acc, octet) => acc * 256 + parseInt(octet, 10), 0);\r\n}\r\n\r\n/**\r\n * \u5BF9IP\u5730\u5740\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F(\u53EF\u4EE5\u6392\u5E8F\u975EIP\u5730\u5740\u7684)\r\n * @param {string[]} ipAddresses - \u5305\u542BIP\u5730\u5740\u7684\u5B57\u7B26\u4E32\u6570\u7EC4\u3002\r\n * @return {string[]} - \u8FD4\u56DE\u6309IP\u5730\u5740\u6570\u5B57\u503C\u5347\u5E8F\u6392\u5E8F\u540E\u7684\u6570\u7EC4\u3002\r\n */\r\nfunction sortIpAddresses(ipAddresses) {\r\n\treturn ipAddresses.sort((a, b) => {\r\n\t\tif (isValidIpAddress(a) && isValidIpAddress(b)) {\r\n\t\t\treturn ipToNumber(a) - ipToNumber(b);\r\n\t\t} else if (!isValidIpAddress(a) && !isValidIpAddress(b)) {\r\n\t\t\treturn a.localeCompare(b);\r\n\t\t} else {\r\n\t\t\treturn isValidIpAddress(a) ? 1 : -1;\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * \u68C0\u67E5\u7ED9\u5B9A\u7684\u5B57\u7B26\u4E32\u662F\u5426\u662F\u6709\u6548\u7684IPv4\u5730\u5740\u3002\r\n * @param {string} ip - \u5F85\u68C0\u67E5\u7684IP\u5730\u5740\u5B57\u7B26\u4E32\u3002\r\n * @returns {boolean} - \u5982\u679C\u7ED9\u5B9A\u7684IP\u5730\u5740\u6709\u6548\uFF0C\u5219\u8FD4\u56DEtrue\uFF1B\u5426\u5219\u8FD4\u56DEfalse\u3002\r\n */\r\nfunction isValidIpAddress(ip) {\r\n\tconst parts = ip.split('.');\r\n\treturn parts.length === 4 && parts.every((part) => /^\\d+$/.test(part) && parseInt(part, 10) >= 0 && parseInt(part, 10) <= 255);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} ipaddrURL - \u8981\u6293\u53D6\u7F51\u9875\u7684\u5185\u5BB9\r\n * @returns {string} - \u8FD4\u56DE\u7F51\u9875\u7684\u5168\u90E8\u5185\u5BB9\r\n */\r\nasync function fetchWebPageContent(URL) {\r\n\ttry {\r\n\t\tconst response = await fetch(URL);\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(`Failed to get: ${response.status}`);\r\n\t\t\treturn '';\r\n\t\t} else {\r\n\t\t\treturn await response.text();\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.error(`Failed to fetch ${URL} web conten: ${err.message}`);\r\n\t\treturn '';\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} cidrParam - \u4ECEget\u8BF7\u6C42\u94FE\u63A5\u4E2D\uFF0C\u83B7\u53D6cidr\u53C2\u6570\u7684cidr\u503C(\u652F\u6301\u591A\u4E2Acidr\u4F20\u5165\uFF0C\u7528\u9017\u53F7\u5206\u5272)\r\n * @returns {Array} - \u8FD4\u56DEcidrs\u8303\u56F4\u5185IP\u6570\u7EC4\uFF08IP\u4E00\u5B9A\u4E0D\u91CD\u590D\uFF0C\u4E14\u5728cidrs\u6570\u7EC4\u91CC\u9762cidr\u8303\u56F4\u5185\uFF0C\u6570\u91CF\u6700\u591A1000\u4E2A\uFF0C\u53D6\u51B3\u4E8Ecidr\u7684\u8303\u56F4\uFF09\r\n */\r\nfunction getCidrParamAndGenerateIps(cidrParam) {\r\n\tlet cidrs = [];\r\n\tlet vessArray = [];\r\n\tif (cidrParam.includes(',')) {\r\n\t\tcidrs = cidrParam.split(',');\r\n\t} else {\r\n\t\tcidrs = [cidrParam];\r\n\t}\r\n\tconst randomIps = randomIpsFromCidrList(cidrs, 1000);\r\n\treturn randomIps;\r\n}\r\n\r\n/**\r\n * \u904D\u5386ipsArray\u6570\u7EC4\uFF0C\u751F\u6210vless\u94FE\u63A5\uFF0C\u8FD4\u56DEvless\u94FE\u63A5\u7684\u6570\u7EC4\r\n * @param {Array} ipsArray - \u5305\u542B\u5927\u91CFIP\u7684\u6570\u7EC4\r\n * @param {string} hostName - sni\u3001headers.host\u7684\u5730\u5740\r\n * @param {string} port - \u7AEF\u53E3\r\n * @param {string} path - vless\u914D\u7F6E\u4E2D\u7684path\r\n * @param {string} userID - uuid4\r\n * @returns {Array} - \u8FD4\u56DEvless\u7684\u6570\u7EC4\r\n */\r\nfunction eachIpsArrayAndGeneratevess(ipsArray, hostName, portParam, path, userID) {\r\n\tlet resultsArray = [];\r\n\tfor (let i = 0; i < ipsArray.length; i++) {\r\n\t\tconst ipaddr = ipsArray[i].trim();\r\n\t\tlet randomHttpPortElement = getRandomElement(HTTP_WITH_PORTS);\r\n\t\tlet randomHttpsPortElement = getRandomElement(HTTPS_WITH_PORTS);\r\n\t\tlet port =\r\n\t\t\t([0, ...HTTPS_WITH_PORTS].includes(Number(portParam)) && hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))) ||\r\n\t\t\t([0, ...HTTP_WITH_PORTS].includes(Number(portParam)) && !hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')))\r\n\t\t\t\t? hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY='))\r\n\t\t\t\t\t? randomHttpPortElement\r\n\t\t\t\t\t: randomHttpsPortElement\r\n\t\t\t\t: portParam;\r\n\t\tlet base64LinkIstls =\r\n\t\t\t'dmxlc3M6Ly8jdXVpZDQjQCNzZXJ2ZXIjOiNwb3J0Iz9lbmNyeXB0aW9uPW5vbmUmc2VjdXJpdHk9dGxzJnNuaT0jaG9zdE5hbWUjJmZwPWNocm9tZSZhbGxvd0luc2VjdXJlPTEmdHlwZT13cyZob3N0PSNob3N0TmFtZSMmcGF0aD0jcGF0aCM';\r\n\t\tlet base64LinkNottls =\r\n\t\t\t'dmxlc3M6Ly8jdXVpZDQjQCNzZXJ2ZXIjOiNwb3J0Iz9lbmNyeXB0aW9uPW5vbmUmc2VjdXJpdHk9bm9uZSZmcD1jaHJvbWUmYWxsb3dJbnNlY3VyZT0xJnR5cGU9d3MmaG9zdD0jaG9zdE5hbWUjJnBhdGg9I3BhdGgj';\r\n\r\n\t\tlet base64LinkString = hostName.includes(base64ToUtf8('d29ya2Vycy5kZXY=')) ? base64LinkNottls : base64LinkIstls;\r\n\r\n\t\tlet replacements = {\r\n\t\t\t'#uuid4#': userID,\r\n\t\t\t'#server#': ipaddr,\r\n\t\t\t'#port#': port,\r\n\t\t\t'#hostName#': hostName,\r\n\t\t\t'#path#': path,\r\n\t\t};\r\n\t\tlet finallyLink =\r\n\t\t\tObject.entries(replacements).reduce((acc, [key, value]) => {\r\n\t\t\t\treturn acc.replace(new RegExp(key, 'g'), value);\r\n\t\t\t}, base64ToUtf8(base64LinkString)) +\r\n\t\t\t'#' +\r\n\t\t\tencodeURIComponent(`${ipaddr}:${port}`);\r\n\r\n\t\tif (finallyLink) {\r\n\t\t\tresultsArray.push(finallyLink);\r\n\t\t}\r\n\t}\r\n\treturn resultsArray;\r\n}\r\n\r\n/**\r\n * \u5C06\u4E00\u4E2A\u6570\u7EC4\u5206\u5272\u6210\u591A\u4E2A\u6307\u5B9A\u5927\u5C0F\u7684\u5B50\u6570\u7EC4\u3002\r\n * @param {Array} array - \u9700\u8981\u5206\u5272\u7684\u539F\u59CB\u6570\u7EC4\u3002\r\n * @param {number} chunkSize - \u6307\u5B9A\u7684\u5B50\u6570\u7EC4\u5927\u5C0F\u3002\r\n * @returns {Array} \u8FD4\u56DE\u4E00\u4E2A\u5305\u542B\u591A\u4E2A\u6307\u5B9A\u5927\u5C0F\u5B50\u6570\u7EC4\u7684\u6570\u7EC4\u3002\r\n */\r\nfunction splitArray(array, chunkSize) {\r\n\tconst chunks = [];\r\n\tlet index = 0;\r\n\twhile (index < array.length) {\r\n\t\tchunks.push(array.slice(index, index + chunkSize));\r\n\t\tindex += chunkSize;\r\n\t}\r\n\treturn chunks;\r\n}\r\n\r\n/**\r\n * \u5C06\u6570\u7EC4\u5E73\u5747\u5206\u5272\u6210\u591A\u4E2A\u5C0F\u6570\u7EC4\u3002\r\n * @param {Array} array - \u9700\u8981\u5206\u5272\u7684\u539F\u59CB\u6570\u7EC4\u3002\r\n * @param {number} maxChunkSize - \u6700\u5927\u5757\u5927\u5C0F\uFF0C\u5206\u5272\u540E\u6BCF\u4E2A\u5757\u7684\u6700\u5927\u957F\u5EA6\u3002\r\n * @returns {Array} \u8FD4\u56DE\u7531\u5E73\u5747\u5206\u5272\u540E\u7684\u5B50\u6570\u7EC4\u7EC4\u6210\u7684\u6570\u7EC4\u3002\r\n */\r\nfunction splitArrayEvenly(array, maxChunkSize) {\r\n\tconst totalLength = array.length;\r\n\tconst numChunks = Math.ceil(totalLength / maxChunkSize);\r\n\tconst chunkSize = Math.ceil(totalLength / numChunks);\r\n\treturn splitArray(array, chunkSize);\r\n}\r\n\r\n/**\r\n * \u5F02\u6B65\u51FD\u6570\uFF1A\u4F7F\u7528\u63D0\u4F9B\u7684GitHub\u8BBF\u95EE\u4EE4\u724C(token)\u548C\u5176\u4ED6\u53C2\u6570\uFF0C\u4ECE\u6307\u5B9A\u7684\u4ED3\u5E93\u4E2D\u83B7\u53D6\u6587\u4EF6\u5185\u5BB9\u3002\r\n *\r\n * @param {string} token - GitHub\u8BBF\u95EE\u4EE4\u724C\uFF0C\u7528\u4E8E\u6388\u6743\u8BF7\u6C42\u3002\r\n * @param {string} owner - \u4ED3\u5E93\u6240\u6709\u8005\u7684\u7528\u6237\u540D\u3002\r\n * @param {string} repo - \u4ED3\u5E93\u540D\u79F0\u3002\r\n * @param {string} filePath - \u8981\u83B7\u53D6\u7684\u6587\u4EF6\u8DEF\u5F84\u3002\r\n * @param {string} branch - \u6587\u4EF6\u6240\u5728\u7684\u5206\u652F\u540D\u79F0\u3002\r\n * @returns {Object} - \u5305\u542B\u6587\u4EF6\u5185\u5BB9\u548C\u5185\u5BB9\u7C7B\u578B\u7684\u5BF9\u8C61\u3002\u5982\u679C\u8BF7\u6C42\u5931\u8D25\uFF0C\u5185\u5BB9\u4E3A\u7A7A\u5B57\u7B26\u4E32\u3002\r\n */\r\nasync function fetchGitHubFile(token, owner, repo, filePath, branch = 'main') {\r\n\t// \u6784\u5EFAGitHub API\u8BF7\u6C42URL\r\n\tconst githubUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${filePath}?ref=${branch}`;\r\n\r\n\ttry {\r\n\t\t// \u53D1\u8D77GET\u8BF7\u6C42\u5230GitHub API\uFF0C\u83B7\u53D6\u6587\u4EF6\u5185\u5BB9\r\n\t\tconst response = await fetch(githubUrl, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `token ${token}`,\r\n\t\t\t\tAccept: 'application/vnd.github.v3.raw',\r\n\t\t\t\t'User-Agent': 'Cloudflare Worker',\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// \u5982\u679C\u54CD\u5E94\u4E0D\u6210\u529F\uFF0C\u8FD4\u56DE\u7A7A\u5B57\u7B26\u4E32\u548C\u6587\u672C\u7C7B\u578B\r\n\t\tif (!response.ok) {\r\n\t\t\treturn {\r\n\t\t\t\tbody: '',\r\n\t\t\t\tcontentType: 'text/plain; charset=utf-8',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// \u4ECE\u54CD\u5E94\u5934\u4E2D\u83B7\u53D6\u5B9E\u9645\u7684\u5185\u5BB9\u7C7B\u578B\uFF0C\u5982\u679C\u4E0D\u5B58\u5728\u5219\u9ED8\u8BA4\u4E3A\u4E8C\u8FDB\u5236\u6D41\u7C7B\u578B\r\n\t\tconst contentType = response.headers.get('Content-Type') || 'application/octet-stream';\r\n\r\n\t\t// \u5C06\u54CD\u5E94\u5185\u5BB9\u8F6C\u6362\u4E3AArrayBuffer\u683C\u5F0F\uFF0C\u4EE5\u4FBF\u4E8E\u540E\u7EED\u5904\u7406\r\n\t\tconst body = await response.arrayBuffer();\r\n\r\n\t\t// \u8FD4\u56DE\u6587\u4EF6\u5185\u5BB9\u548C\u5185\u5BB9\u7C7B\u578B\r\n\t\treturn {\r\n\t\t\tbody: body,\r\n\t\t\tcontentType: contentType,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\t// \u5982\u679C\u8BF7\u6C42\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF\uFF0C\u8FD4\u56DE\u7A7A\u5B57\u7B26\u4E32\u548C\u6587\u672C\u7C7B\u578B\r\n\t\treturn {\r\n\t\t\tbody: '',\r\n\t\t\tcontentType: 'text/plain; charset=utf-8',\r\n\t\t};\r\n\t}\r\n}\r\n\r\n// \u68C0\u67E5\u662F\u5426\u4E3A\"(\u5B50)\u57DF\u540D\u3001IPv4\u3001[IPv6]\u3001(\u5B50)\u57DF\u540D:\u7AEF\u53E3\u3001IPv4:\u7AEF\u53E3\u3001[IPv6]:\u7AEF\u53E3\"\u4E2D\u4EFB\u610F\u4E00\u4E2A\uFF1F\r\nfunction isValidlandingAddress(ip) {\r\n\tvar reg =\r\n\t\t/^(?:(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}(?::\\d{1,5})?|(?:(?:\\d{1,3}\\.){3}\\d{1,3})(?::\\d{1,5})?|(?:\\[[0-9a-fA-F:]+\\])(?::\\d{1,5})?)$/;\r\n\treturn reg.test(ip);\r\n}\r\n\r\n// \u89E3\u6790path\u8F93\u5165\u7684landingAddress\u5B57\u7B26\u4E32\uFF0C\u8FD4\u56DEhost\u548Cport\u7684json\u503C\r\nfunction parselandingAddress(address) {\r\n\t// \u5339\u914D\u5730\u5740\u683C\u5F0F\uFF1A(\u5B50)\u57DF\u540D\u3001IPv4\u3001[IPv6]\u3001(\u5B50)\u57DF\u540D:\u7AEF\u53E3\u3001IPv4:\u7AEF\u53E3\u3001[IPv6]:\u7AEF\u53E3\r\n\tconst regex =\r\n\t\t/^(?:(?<domain>(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::(?<port>\\d{1,5}))?|(?<ipv4>(?:\\d{1,3}\\.){3}\\d{1,3})(?::(?<port_ipv4>\\d{1,5}))?|(?<ipv6>\\[[0-9a-fA-F:]+\\])(?::(?<port_ipv6>\\d{1,5}))?)$/;\r\n\r\n\tconst match = address.match(regex);\r\n\r\n\tif (match) {\r\n\t\tlet host = match.groups.domain || match.groups.ipv4 || match.groups.ipv6;\r\n\t\tlet port = match.groups.port || match.groups.port_ipv4 || match.groups.port_ipv6 || undefined;\r\n\r\n\t\treturn { host, port };\r\n\t} else {\r\n\t\treturn { host: '', undefined };\r\n\t}\r\n}\r\n\r\nfunction getRandomElement(array) {\r\n\tconst randomIndex = Math.floor(Math.random() * array.length);\r\n\treturn array[randomIndex];\r\n}\r\n\r\n// \u5C06base64\u52A0\u5BC6\u7684\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u6B63\u7ECF\u7684\u5B57\u7B26\u4E32\r\nfunction base64ToUtf8(base64Str) {\r\n\tlet binary = atob(base64Str);\r\n\tlet bytes = new Uint8Array([...binary].map((char) => char.charCodeAt(0)));\r\n\tlet decoder = new TextDecoder();\r\n\treturn decoder.decode(bytes);\r\n}\r\n"],
  "mappings": "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",
  "names": ["password", "socksAddress", "tcpSocket", "userID", "URL"]
}
